//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace ArcGIS_DOTNET_3D_Sample
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[129];
            _typeNameTable[0] = "Esri.ArcGISRuntime.Controls.SceneView";
            _typeNameTable[1] = "Esri.ArcGISRuntime.Controls.ViewBase";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[3] = "Esri.ArcGISRuntime.Controls.Scene";
            _typeNameTable[4] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[5] = "Esri.ArcGISRuntime.Layers.LayerCollection";
            _typeNameTable[6] = "System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.Layer>";
            _typeNameTable[7] = "System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.Layer>";
            _typeNameTable[8] = "Object";
            _typeNameTable[9] = "Esri.ArcGISRuntime.Layers.Layer";
            _typeNameTable[10] = "Esri.ArcGISRuntime.Geometry.Envelope";
            _typeNameTable[11] = "Esri.ArcGISRuntime.Geometry.Geometry";
            _typeNameTable[12] = "Esri.ArcGISRuntime.Layers.LayerStatus";
            _typeNameTable[13] = "System.Enum";
            _typeNameTable[14] = "System.ValueType";
            _typeNameTable[15] = "System.Exception";
            _typeNameTable[16] = "Esri.ArcGISRuntime.Geometry.SpatialReference";
            _typeNameTable[17] = "Double";
            _typeNameTable[18] = "Boolean";
            _typeNameTable[19] = "String";
            _typeNameTable[20] = "Esri.ArcGISRuntime.Controls.ViewLabelProperties";
            _typeNameTable[21] = "Esri.ArcGISRuntime.Geometry.MapPoint";
            _typeNameTable[22] = "Windows.UI.Color";
            _typeNameTable[23] = "Esri.ArcGISRuntime.Controls.Camera";
            _typeNameTable[24] = "Esri.ArcGISRuntime.Controls.GraphicsOverlayCollection";
            _typeNameTable[25] = "System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Controls.GraphicsOverlay>";
            _typeNameTable[26] = "System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Controls.GraphicsOverlay>";
            _typeNameTable[27] = "Esri.ArcGISRuntime.Controls.GraphicsOverlay";
            _typeNameTable[28] = "Esri.ArcGISRuntime.Layers.GraphicCollection";
            _typeNameTable[29] = "System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.Graphic>";
            _typeNameTable[30] = "System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.Graphic>";
            _typeNameTable[31] = "Esri.ArcGISRuntime.Layers.Graphic";
            _typeNameTable[32] = "Esri.ArcGISRuntime.Data.Feature";
            _typeNameTable[33] = "System.Collections.Generic.IDictionary`2<String, Object>";
            _typeNameTable[34] = "Esri.ArcGISRuntime.Symbology.Symbol";
            _typeNameTable[35] = "Int32";
            _typeNameTable[36] = "Esri.ArcGISRuntime.Layers.GraphicsRenderingMode";
            _typeNameTable[37] = "Esri.ArcGISRuntime.Symbology.Renderer";
            _typeNameTable[38] = "Esri.ArcGISRuntime.Layers.LayerSceneProperties";
            _typeNameTable[39] = "System.Collections.Generic.IEnumerable`1<Esri.ArcGISRuntime.Layers.Graphic>";
            _typeNameTable[40] = "Esri.ArcGISRuntime.Layers.LabelProperties";
            _typeNameTable[41] = "Esri.ArcGISRuntime.Layers.AttributeLabelClassCollection";
            _typeNameTable[42] = "System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.AttributeLabelClass>";
            _typeNameTable[43] = "System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.AttributeLabelClass>";
            _typeNameTable[44] = "Esri.ArcGISRuntime.Layers.AttributeLabelClass";
            _typeNameTable[45] = "Esri.ArcGISRuntime.Symbology.TextSymbol";
            _typeNameTable[46] = "Esri.ArcGISRuntime.Symbology.MarkerSymbol";
            _typeNameTable[47] = "Esri.ArcGISRuntime.Symbology.SymbolFont";
            _typeNameTable[48] = "Esri.ArcGISRuntime.Layers.DuplicateLabels";
            _typeNameTable[49] = "Esri.ArcGISRuntime.Layers.LabelPlacement";
            _typeNameTable[50] = "Esri.ArcGISRuntime.Layers.LabelPosition";
            _typeNameTable[51] = "Esri.ArcGISRuntime.Layers.LabelPriority";
            _typeNameTable[52] = "Esri.ArcGISRuntime.Location.LocationDisplay";
            _typeNameTable[53] = "Esri.ArcGISRuntime.Data.TimeExtent";
            _typeNameTable[54] = "Esri.ArcGISRuntime.Controls.OverlayItemsControl";
            _typeNameTable[55] = "Esri.ArcGISRuntime.Controls.OverlayItemsCollection";
            _typeNameTable[56] = "System.Collections.ObjectModel.ObservableCollection`1<Object>";
            _typeNameTable[57] = "System.Collections.ObjectModel.Collection`1<Object>";
            _typeNameTable[58] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[59] = "Esri.ArcGISRuntime.Controls.ElevationSourceCollection";
            _typeNameTable[60] = "System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Controls.ElevationSource>";
            _typeNameTable[61] = "System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Controls.ElevationSource>";
            _typeNameTable[62] = "Esri.ArcGISRuntime.Controls.ElevationSource";
            _typeNameTable[63] = "Esri.ArcGISRuntime.Controls.ServiceElevationSource";
            _typeNameTable[64] = "Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer";
            _typeNameTable[65] = "Esri.ArcGISRuntime.Layers.TiledLayer";
            _typeNameTable[66] = "Esri.ArcGISRuntime.ArcGISServices.MapServiceInfo";
            _typeNameTable[67] = "Esri.ArcGISRuntime.ArcGISServices.MapServiceInfoBase";
            _typeNameTable[68] = "Esri.ArcGISRuntime.ArcGISServices.ServiceInfo";
            _typeNameTable[69] = "Esri.ArcGISRuntime.Layers.TiledLayerInitializationInfo";
            _typeNameTable[70] = "Esri.ArcGISRuntime.Layers.LayerInitializationInfo";
            _typeNameTable[71] = "Esri.ArcGISRuntime.Layers.TiledLayerResamplingMode";
            _typeNameTable[72] = "ArcGIS_DOTNET_3D_Sample.MainPage";
            _typeNameTable[73] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[74] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[75] = "Esri.ArcGISRuntime.Controls.Map";
            _typeNameTable[76] = "Esri.ArcGISRuntime.Controls.Viewpoint";
            _typeNameTable[77] = "Esri.ArcGISRuntime.Controls.ViewpointCenter";
            _typeNameTable[78] = "System.Nullable`1<Double>";
            _typeNameTable[79] = "Esri.ArcGISRuntime.Controls.ViewpointExtent";
            _typeNameTable[80] = "Esri.ArcGISRuntime.Layers.KmlDocument";
            _typeNameTable[81] = "Esri.ArcGISRuntime.Layers.KmlContainer";
            _typeNameTable[82] = "Esri.ArcGISRuntime.Layers.KmlFeature";
            _typeNameTable[83] = "Esri.ArcGISRuntime.Layers.KmlListType";
            _typeNameTable[84] = "Esri.ArcGISRuntime.Layers.KmlFeatureCollection";
            _typeNameTable[85] = "Esri.ArcGISRuntime.Layers.KmlFeatureIcon";
            _typeNameTable[86] = "Esri.ArcGISRuntime.Layers.KmlBalloonStyle";
            _typeNameTable[87] = "Esri.ArcGISRuntime.Layers.KmlFolder";
            _typeNameTable[88] = "Esri.ArcGISRuntime.Layers.KmlNetworkLink";
            _typeNameTable[89] = "Esri.ArcGISRuntime.Layers.KmlPlacemark";
            _typeNameTable[90] = "Esri.ArcGISRuntime.Layers.KmlGraphicType";
            _typeNameTable[91] = "Esri.ArcGISRuntime.Layers.KmlGroundOverlay";
            _typeNameTable[92] = "Esri.ArcGISRuntime.Layers.KmlOverlay";
            _typeNameTable[93] = "Esri.ArcGISRuntime.Layers.KmlPhotoOverlay";
            _typeNameTable[94] = "Esri.ArcGISRuntime.Layers.KmlScreenOverlay";
            _typeNameTable[95] = "Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol";
            _typeNameTable[96] = "Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneMarkerSymbol";
            _typeNameTable[97] = "Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbol";
            _typeNameTable[98] = "Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbolAnchorPosition";
            _typeNameTable[99] = "Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeSymbol";
            _typeNameTable[100] = "Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfoCollection";
            _typeNameTable[101] = "System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo>";
            _typeNameTable[102] = "System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo>";
            _typeNameTable[103] = "Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo";
            _typeNameTable[104] = "Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol";
            _typeNameTable[105] = "Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol";
            _typeNameTable[106] = "Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol";
            _typeNameTable[107] = "Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol";
            _typeNameTable[108] = "Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol";
            _typeNameTable[109] = "Esri.ArcGISRuntime.Symbology.SceneSymbology.TubeLineSymbol";
            _typeNameTable[110] = "Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneLineSymbol";
            _typeNameTable[111] = "Esri.ArcGISRuntime.Symbology.Specialized.MultiLayerSymbol";
            _typeNameTable[112] = "Esri.ArcGISRuntime.Symbology.CompositeSymbol";
            _typeNameTable[113] = "Esri.ArcGISRuntime.Symbology.SymbolCollection";
            _typeNameTable[114] = "System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Symbology.Symbol>";
            _typeNameTable[115] = "System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Symbology.Symbol>";
            _typeNameTable[116] = "Esri.ArcGISRuntime.Symbology.PictureFillSymbol";
            _typeNameTable[117] = "Esri.ArcGISRuntime.Symbology.FillSymbol";
            _typeNameTable[118] = "Esri.ArcGISRuntime.Symbology.SimpleLineSymbol";
            _typeNameTable[119] = "Esri.ArcGISRuntime.Symbology.LineSymbol";
            _typeNameTable[120] = "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol";
            _typeNameTable[121] = "Esri.ArcGISRuntime.Symbology.MarkerAngleAlignment";
            _typeNameTable[122] = "Esri.ArcGISRuntime.Symbology.SimpleFillSymbol";
            _typeNameTable[123] = "Esri.ArcGISRuntime.Symbology.SimpleFillStyle";
            _typeNameTable[124] = "Esri.ArcGISRuntime.Symbology.SimpleLineStyle";
            _typeNameTable[125] = "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol";
            _typeNameTable[126] = "Esri.ArcGISRuntime.Symbology.SimpleMarkerStyle";
            _typeNameTable[127] = "Esri.ArcGISRuntime.Symbology.VerticalTextAlignment";
            _typeNameTable[128] = "Esri.ArcGISRuntime.Symbology.HorizontalTextAlignment";

            _typeTable = new global::System.Type[129];
            _typeTable[0] = typeof(global::Esri.ArcGISRuntime.Controls.SceneView);
            _typeTable[1] = typeof(global::Esri.ArcGISRuntime.Controls.ViewBase);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[3] = typeof(global::Esri.ArcGISRuntime.Controls.Scene);
            _typeTable[4] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[5] = typeof(global::Esri.ArcGISRuntime.Layers.LayerCollection);
            _typeTable[6] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.Layer>);
            _typeTable[7] = typeof(global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.Layer>);
            _typeTable[8] = typeof(global::System.Object);
            _typeTable[9] = typeof(global::Esri.ArcGISRuntime.Layers.Layer);
            _typeTable[10] = typeof(global::Esri.ArcGISRuntime.Geometry.Envelope);
            _typeTable[11] = typeof(global::Esri.ArcGISRuntime.Geometry.Geometry);
            _typeTable[12] = typeof(global::Esri.ArcGISRuntime.Layers.LayerStatus);
            _typeTable[13] = typeof(global::System.Enum);
            _typeTable[14] = typeof(global::System.ValueType);
            _typeTable[15] = typeof(global::System.Exception);
            _typeTable[16] = typeof(global::Esri.ArcGISRuntime.Geometry.SpatialReference);
            _typeTable[17] = typeof(global::System.Double);
            _typeTable[18] = typeof(global::System.Boolean);
            _typeTable[19] = typeof(global::System.String);
            _typeTable[20] = typeof(global::Esri.ArcGISRuntime.Controls.ViewLabelProperties);
            _typeTable[21] = typeof(global::Esri.ArcGISRuntime.Geometry.MapPoint);
            _typeTable[22] = typeof(global::Windows.UI.Color);
            _typeTable[23] = typeof(global::Esri.ArcGISRuntime.Controls.Camera);
            _typeTable[24] = typeof(global::Esri.ArcGISRuntime.Controls.GraphicsOverlayCollection);
            _typeTable[25] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Controls.GraphicsOverlay>);
            _typeTable[26] = typeof(global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Controls.GraphicsOverlay>);
            _typeTable[27] = typeof(global::Esri.ArcGISRuntime.Controls.GraphicsOverlay);
            _typeTable[28] = typeof(global::Esri.ArcGISRuntime.Layers.GraphicCollection);
            _typeTable[29] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.Graphic>);
            _typeTable[30] = typeof(global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.Graphic>);
            _typeTable[31] = typeof(global::Esri.ArcGISRuntime.Layers.Graphic);
            _typeTable[32] = typeof(global::Esri.ArcGISRuntime.Data.Feature);
            _typeTable[33] = typeof(global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>);
            _typeTable[34] = typeof(global::Esri.ArcGISRuntime.Symbology.Symbol);
            _typeTable[35] = typeof(global::System.Int32);
            _typeTable[36] = typeof(global::Esri.ArcGISRuntime.Layers.GraphicsRenderingMode);
            _typeTable[37] = typeof(global::Esri.ArcGISRuntime.Symbology.Renderer);
            _typeTable[38] = typeof(global::Esri.ArcGISRuntime.Layers.LayerSceneProperties);
            _typeTable[39] = typeof(global::System.Collections.Generic.IEnumerable<global::Esri.ArcGISRuntime.Layers.Graphic>);
            _typeTable[40] = typeof(global::Esri.ArcGISRuntime.Layers.LabelProperties);
            _typeTable[41] = typeof(global::Esri.ArcGISRuntime.Layers.AttributeLabelClassCollection);
            _typeTable[42] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.AttributeLabelClass>);
            _typeTable[43] = typeof(global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.AttributeLabelClass>);
            _typeTable[44] = typeof(global::Esri.ArcGISRuntime.Layers.AttributeLabelClass);
            _typeTable[45] = typeof(global::Esri.ArcGISRuntime.Symbology.TextSymbol);
            _typeTable[46] = typeof(global::Esri.ArcGISRuntime.Symbology.MarkerSymbol);
            _typeTable[47] = typeof(global::Esri.ArcGISRuntime.Symbology.SymbolFont);
            _typeTable[48] = typeof(global::Esri.ArcGISRuntime.Layers.DuplicateLabels);
            _typeTable[49] = typeof(global::Esri.ArcGISRuntime.Layers.LabelPlacement);
            _typeTable[50] = typeof(global::Esri.ArcGISRuntime.Layers.LabelPosition);
            _typeTable[51] = typeof(global::Esri.ArcGISRuntime.Layers.LabelPriority);
            _typeTable[52] = typeof(global::Esri.ArcGISRuntime.Location.LocationDisplay);
            _typeTable[53] = typeof(global::Esri.ArcGISRuntime.Data.TimeExtent);
            _typeTable[54] = typeof(global::Esri.ArcGISRuntime.Controls.OverlayItemsControl);
            _typeTable[55] = typeof(global::Esri.ArcGISRuntime.Controls.OverlayItemsCollection);
            _typeTable[56] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.Object>);
            _typeTable[57] = typeof(global::System.Collections.ObjectModel.Collection<global::System.Object>);
            _typeTable[58] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[59] = typeof(global::Esri.ArcGISRuntime.Controls.ElevationSourceCollection);
            _typeTable[60] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Controls.ElevationSource>);
            _typeTable[61] = typeof(global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Controls.ElevationSource>);
            _typeTable[62] = typeof(global::Esri.ArcGISRuntime.Controls.ElevationSource);
            _typeTable[63] = typeof(global::Esri.ArcGISRuntime.Controls.ServiceElevationSource);
            _typeTable[64] = typeof(global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer);
            _typeTable[65] = typeof(global::Esri.ArcGISRuntime.Layers.TiledLayer);
            _typeTable[66] = typeof(global::Esri.ArcGISRuntime.ArcGISServices.MapServiceInfo);
            _typeTable[67] = typeof(global::Esri.ArcGISRuntime.ArcGISServices.MapServiceInfoBase);
            _typeTable[68] = typeof(global::Esri.ArcGISRuntime.ArcGISServices.ServiceInfo);
            _typeTable[69] = typeof(global::Esri.ArcGISRuntime.Layers.TiledLayerInitializationInfo);
            _typeTable[70] = typeof(global::Esri.ArcGISRuntime.Layers.LayerInitializationInfo);
            _typeTable[71] = typeof(global::Esri.ArcGISRuntime.Layers.TiledLayerResamplingMode);
            _typeTable[72] = typeof(global::ArcGIS_DOTNET_3D_Sample.MainPage);
            _typeTable[73] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[74] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[75] = typeof(global::Esri.ArcGISRuntime.Controls.Map);
            _typeTable[76] = typeof(global::Esri.ArcGISRuntime.Controls.Viewpoint);
            _typeTable[77] = typeof(global::Esri.ArcGISRuntime.Controls.ViewpointCenter);
            _typeTable[78] = typeof(global::System.Nullable<global::System.Double>);
            _typeTable[79] = typeof(global::Esri.ArcGISRuntime.Controls.ViewpointExtent);
            _typeTable[80] = typeof(global::Esri.ArcGISRuntime.Layers.KmlDocument);
            _typeTable[81] = typeof(global::Esri.ArcGISRuntime.Layers.KmlContainer);
            _typeTable[82] = typeof(global::Esri.ArcGISRuntime.Layers.KmlFeature);
            _typeTable[83] = typeof(global::Esri.ArcGISRuntime.Layers.KmlListType);
            _typeTable[84] = typeof(global::Esri.ArcGISRuntime.Layers.KmlFeatureCollection);
            _typeTable[85] = typeof(global::Esri.ArcGISRuntime.Layers.KmlFeatureIcon);
            _typeTable[86] = typeof(global::Esri.ArcGISRuntime.Layers.KmlBalloonStyle);
            _typeTable[87] = typeof(global::Esri.ArcGISRuntime.Layers.KmlFolder);
            _typeTable[88] = typeof(global::Esri.ArcGISRuntime.Layers.KmlNetworkLink);
            _typeTable[89] = typeof(global::Esri.ArcGISRuntime.Layers.KmlPlacemark);
            _typeTable[90] = typeof(global::Esri.ArcGISRuntime.Layers.KmlGraphicType);
            _typeTable[91] = typeof(global::Esri.ArcGISRuntime.Layers.KmlGroundOverlay);
            _typeTable[92] = typeof(global::Esri.ArcGISRuntime.Layers.KmlOverlay);
            _typeTable[93] = typeof(global::Esri.ArcGISRuntime.Layers.KmlPhotoOverlay);
            _typeTable[94] = typeof(global::Esri.ArcGISRuntime.Layers.KmlScreenOverlay);
            _typeTable[95] = typeof(global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol);
            _typeTable[96] = typeof(global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneMarkerSymbol);
            _typeTable[97] = typeof(global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbol);
            _typeTable[98] = typeof(global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbolAnchorPosition);
            _typeTable[99] = typeof(global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeSymbol);
            _typeTable[100] = typeof(global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfoCollection);
            _typeTable[101] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo>);
            _typeTable[102] = typeof(global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo>);
            _typeTable[103] = typeof(global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo);
            _typeTable[104] = typeof(global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol);
            _typeTable[105] = typeof(global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol);
            _typeTable[106] = typeof(global::Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol);
            _typeTable[107] = typeof(global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol);
            _typeTable[108] = typeof(global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol);
            _typeTable[109] = typeof(global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TubeLineSymbol);
            _typeTable[110] = typeof(global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneLineSymbol);
            _typeTable[111] = typeof(global::Esri.ArcGISRuntime.Symbology.Specialized.MultiLayerSymbol);
            _typeTable[112] = typeof(global::Esri.ArcGISRuntime.Symbology.CompositeSymbol);
            _typeTable[113] = typeof(global::Esri.ArcGISRuntime.Symbology.SymbolCollection);
            _typeTable[114] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Symbology.Symbol>);
            _typeTable[115] = typeof(global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Symbology.Symbol>);
            _typeTable[116] = typeof(global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol);
            _typeTable[117] = typeof(global::Esri.ArcGISRuntime.Symbology.FillSymbol);
            _typeTable[118] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol);
            _typeTable[119] = typeof(global::Esri.ArcGISRuntime.Symbology.LineSymbol);
            _typeTable[120] = typeof(global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol);
            _typeTable[121] = typeof(global::Esri.ArcGISRuntime.Symbology.MarkerAngleAlignment);
            _typeTable[122] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol);
            _typeTable[123] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleFillStyle);
            _typeTable[124] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleLineStyle);
            _typeTable[125] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol);
            _typeTable[126] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleMarkerStyle);
            _typeTable[127] = typeof(global::Esri.ArcGISRuntime.Symbology.VerticalTextAlignment);
            _typeTable[128] = typeof(global::Esri.ArcGISRuntime.Symbology.HorizontalTextAlignment);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_SceneView() { return new global::Esri.ArcGISRuntime.Controls.SceneView(); }
        private object Activate_3_Scene() { return new global::Esri.ArcGISRuntime.Controls.Scene(); }
        private object Activate_5_LayerCollection() { return new global::Esri.ArcGISRuntime.Layers.LayerCollection(); }
        private object Activate_6_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.Layer>(); }
        private object Activate_7_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.Layer>(); }
        private object Activate_15_Exception() { return new global::System.Exception(); }
        private object Activate_20_ViewLabelProperties() { return new global::Esri.ArcGISRuntime.Controls.ViewLabelProperties(); }
        private object Activate_24_GraphicsOverlayCollection() { return new global::Esri.ArcGISRuntime.Controls.GraphicsOverlayCollection(); }
        private object Activate_25_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Controls.GraphicsOverlay>(); }
        private object Activate_26_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Controls.GraphicsOverlay>(); }
        private object Activate_27_GraphicsOverlay() { return new global::Esri.ArcGISRuntime.Controls.GraphicsOverlay(); }
        private object Activate_28_GraphicCollection() { return new global::Esri.ArcGISRuntime.Layers.GraphicCollection(); }
        private object Activate_29_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.Graphic>(); }
        private object Activate_30_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.Graphic>(); }
        private object Activate_31_Graphic() { return new global::Esri.ArcGISRuntime.Layers.Graphic(); }
        private object Activate_38_LayerSceneProperties() { return new global::Esri.ArcGISRuntime.Layers.LayerSceneProperties(); }
        private object Activate_40_LabelProperties() { return new global::Esri.ArcGISRuntime.Layers.LabelProperties(); }
        private object Activate_41_AttributeLabelClassCollection() { return new global::Esri.ArcGISRuntime.Layers.AttributeLabelClassCollection(); }
        private object Activate_42_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Layers.AttributeLabelClass>(); }
        private object Activate_43_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Layers.AttributeLabelClass>(); }
        private object Activate_44_AttributeLabelClass() { return new global::Esri.ArcGISRuntime.Layers.AttributeLabelClass(); }
        private object Activate_45_TextSymbol() { return new global::Esri.ArcGISRuntime.Symbology.TextSymbol(); }
        private object Activate_47_SymbolFont() { return new global::Esri.ArcGISRuntime.Symbology.SymbolFont(); }
        private object Activate_52_LocationDisplay() { return new global::Esri.ArcGISRuntime.Location.LocationDisplay(); }
        private object Activate_53_TimeExtent() { return new global::Esri.ArcGISRuntime.Data.TimeExtent(); }
        private object Activate_54_OverlayItemsControl() { return new global::Esri.ArcGISRuntime.Controls.OverlayItemsControl(); }
        private object Activate_56_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::System.Object>(); }
        private object Activate_57_Collection() { return new global::System.Collections.ObjectModel.Collection<global::System.Object>(); }
        private object Activate_59_ElevationSourceCollection() { return new global::Esri.ArcGISRuntime.Controls.ElevationSourceCollection(); }
        private object Activate_60_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Controls.ElevationSource>(); }
        private object Activate_61_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Controls.ElevationSource>(); }
        private object Activate_63_ServiceElevationSource() { return new global::Esri.ArcGISRuntime.Controls.ServiceElevationSource(); }
        private object Activate_64_ArcGISTiledMapServiceLayer() { return new global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer(); }
        private object Activate_72_MainPage() { return new global::ArcGIS_DOTNET_3D_Sample.MainPage(); }
        private object Activate_75_Map() { return new global::Esri.ArcGISRuntime.Controls.Map(); }
        private object Activate_77_ViewpointCenter() { return new global::Esri.ArcGISRuntime.Controls.ViewpointCenter(); }
        private object Activate_79_ViewpointExtent() { return new global::Esri.ArcGISRuntime.Controls.ViewpointExtent(); }
        private object Activate_95_ConeMarkerSymbol() { return new global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol(); }
        private object Activate_99_DistanceCompositeSymbol() { return new global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeSymbol(); }
        private object Activate_100_DistanceCompositeInfoCollection() { return new global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfoCollection(); }
        private object Activate_101_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo>(); }
        private object Activate_102_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo>(); }
        private object Activate_103_DistanceCompositeInfo() { return new global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo(); }
        private object Activate_104_DiamondMarkerSymbol() { return new global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol(); }
        private object Activate_105_ModelMarkerSymbol() { return new global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol(); }
        private object Activate_106_BoxMarkerSymbol() { return new global::Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol(); }
        private object Activate_107_SphereMarkerSymbol() { return new global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol(); }
        private object Activate_108_TetrahedronMarkerSymbol() { return new global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol(); }
        private object Activate_109_TubeLineSymbol() { return new global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TubeLineSymbol(); }
        private object Activate_112_CompositeSymbol() { return new global::Esri.ArcGISRuntime.Symbology.CompositeSymbol(); }
        private object Activate_113_SymbolCollection() { return new global::Esri.ArcGISRuntime.Symbology.SymbolCollection(); }
        private object Activate_114_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Esri.ArcGISRuntime.Symbology.Symbol>(); }
        private object Activate_115_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Symbology.Symbol>(); }
        private object Activate_116_PictureFillSymbol() { return new global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol(); }
        private object Activate_118_SimpleLineSymbol() { return new global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol(); }
        private object Activate_120_PictureMarkerSymbol() { return new global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol(); }
        private object Activate_122_SimpleFillSymbol() { return new global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol(); }
        private object Activate_125_SimpleMarkerSymbol() { return new global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol(); }
        private void VectorAdd_5_LayerCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.Layer>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.Layer)item;
            collection.Add(newItem);
        }
        private void VectorAdd_6_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.Layer>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.Layer)item;
            collection.Add(newItem);
        }
        private void VectorAdd_7_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.Layer>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.Layer)item;
            collection.Add(newItem);
        }
        private void VectorAdd_24_GraphicsOverlayCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Controls.GraphicsOverlay>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)item;
            collection.Add(newItem);
        }
        private void VectorAdd_25_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Controls.GraphicsOverlay>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)item;
            collection.Add(newItem);
        }
        private void VectorAdd_26_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Controls.GraphicsOverlay>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)item;
            collection.Add(newItem);
        }
        private void VectorAdd_28_GraphicCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.Graphic>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.Graphic)item;
            collection.Add(newItem);
        }
        private void VectorAdd_29_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.Graphic>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.Graphic)item;
            collection.Add(newItem);
        }
        private void VectorAdd_30_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.Graphic>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.Graphic)item;
            collection.Add(newItem);
        }
        private void MapAdd_33_IDictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_41_AttributeLabelClassCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.AttributeLabelClass>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)item;
            collection.Add(newItem);
        }
        private void VectorAdd_42_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.AttributeLabelClass>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)item;
            collection.Add(newItem);
        }
        private void VectorAdd_43_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Layers.AttributeLabelClass>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)item;
            collection.Add(newItem);
        }
        private void VectorAdd_55_OverlayItemsCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_56_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_57_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_59_ElevationSourceCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Controls.ElevationSource>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Controls.ElevationSource)item;
            collection.Add(newItem);
        }
        private void VectorAdd_60_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Controls.ElevationSource>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Controls.ElevationSource)item;
            collection.Add(newItem);
        }
        private void VectorAdd_61_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Controls.ElevationSource>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Controls.ElevationSource)item;
            collection.Add(newItem);
        }
        private void VectorAdd_100_DistanceCompositeInfoCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo)item;
            collection.Add(newItem);
        }
        private void VectorAdd_101_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo)item;
            collection.Add(newItem);
        }
        private void VectorAdd_102_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo)item;
            collection.Add(newItem);
        }
        private void VectorAdd_113_SymbolCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Symbology.Symbol>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Symbology.Symbol)item;
            collection.Add(newItem);
        }
        private void VectorAdd_114_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Symbology.Symbol>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Symbology.Symbol)item;
            collection.Add(newItem);
        }
        private void VectorAdd_115_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Symbology.Symbol>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Symbology.Symbol)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Esri.ArcGISRuntime.Controls.SceneView
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewBase"));
                userType.Activator = Activate_0_SceneView;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.Controls.SceneView.Scene");
                userType.AddMemberName("Scene");
                userType.AddMemberName("Labeling");
                userType.AddMemberName("IsShadowsEnabled");
                userType.AddMemberName("LightPoint");
                userType.AddMemberName("AmbientLight");
                userType.AddMemberName("SpatialReference");
                userType.AddMemberName("Camera");
                userType.AddMemberName("IsWrapAroundActive");
                userType.AddMemberName("ElevationExaggeration");
                xamlType = userType;
                break;

            case 1:   //  Esri.ArcGISRuntime.Controls.ViewBase
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.AddMemberName("GraphicsOverlays");
                userType.AddMemberName("LocationDisplay");
                userType.AddMemberName("TimeExtent");
                userType.AddMemberName("IsNavigating");
                userType.AddMemberName("Overlays");
                userType.AddMemberName("IsLogoVisible");
                userType.AddMemberName("ViewOverlayAnchor");
                xamlType = userType;
                break;

            case 2:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Esri.ArcGISRuntime.Controls.Scene
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_3_Scene;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.Controls.Scene.Layers");
                userType.AddMemberName("Layers");
                userType.AddMemberName("Surface");
                xamlType = userType;
                break;

            case 4:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  Esri.ArcGISRuntime.Layers.LayerCollection
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.Layer>"));
                userType.CollectionAdd = VectorAdd_5_LayerCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 6:   //  System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.Layer>
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.Layer>"));
                userType.Activator = Activate_6_ObservableCollection;
                userType.CollectionAdd = VectorAdd_6_ObservableCollection;
                xamlType = userType;
                break;

            case 7:   //  System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.Layer>
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_7_Collection;
                userType.CollectionAdd = VectorAdd_7_Collection;
                xamlType = userType;
                break;

            case 8:   //  Object
                xamlType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  Esri.ArcGISRuntime.Layers.Layer
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("FullExtent");
                userType.AddMemberName("Status");
                userType.AddMemberName("InitializationException");
                userType.AddMemberName("DefaultSpatialReference");
                userType.AddMemberName("Opacity");
                userType.AddMemberName("IsVisible");
                userType.AddMemberName("DisplayName");
                userType.AddMemberName("ShowLegend");
                userType.AddMemberName("MinScale");
                userType.AddMemberName("MaxScale");
                userType.AddMemberName("ID");
                xamlType = userType;
                break;

            case 10:   //  Esri.ArcGISRuntime.Geometry.Envelope
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Geometry"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 11:   //  Esri.ArcGISRuntime.Geometry.Geometry
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 12:   //  Esri.ArcGISRuntime.Layers.LayerStatus
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("NotInitialized", global::Esri.ArcGISRuntime.Layers.LayerStatus.NotInitialized);
                userType.AddEnumValue("Initializing", global::Esri.ArcGISRuntime.Layers.LayerStatus.Initializing);
                userType.AddEnumValue("Initialized", global::Esri.ArcGISRuntime.Layers.LayerStatus.Initialized);
                userType.AddEnumValue("Failed", global::Esri.ArcGISRuntime.Layers.LayerStatus.Failed);
                xamlType = userType;
                break;

            case 13:   //  System.Enum
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 14:   //  System.ValueType
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 15:   //  System.Exception
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 16:   //  Esri.ArcGISRuntime.Geometry.SpatialReference
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 17:   //  Double
                xamlType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  Boolean
                xamlType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  String
                xamlType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  Esri.ArcGISRuntime.Controls.ViewLabelProperties
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 21:   //  Esri.ArcGISRuntime.Geometry.MapPoint
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Geometry"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 22:   //  Windows.UI.Color
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 23:   //  Esri.ArcGISRuntime.Controls.Camera
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 24:   //  Esri.ArcGISRuntime.Controls.GraphicsOverlayCollection
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Controls.GraphicsOverlay>"));
                userType.CollectionAdd = VectorAdd_24_GraphicsOverlayCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 25:   //  System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Controls.GraphicsOverlay>
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Controls.GraphicsOverlay>"));
                userType.Activator = Activate_25_ObservableCollection;
                userType.CollectionAdd = VectorAdd_25_ObservableCollection;
                xamlType = userType;
                break;

            case 26:   //  System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Controls.GraphicsOverlay>
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_26_Collection;
                userType.CollectionAdd = VectorAdd_26_Collection;
                xamlType = userType;
                break;

            case 27:   //  Esri.ArcGISRuntime.Controls.GraphicsOverlay
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_27_GraphicsOverlay;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.Controls.GraphicsOverlay.Graphics");
                userType.AddMemberName("Graphics");
                userType.AddMemberName("RenderingMode");
                userType.AddMemberName("SelectionColor");
                userType.AddMemberName("Renderer");
                userType.AddMemberName("IsVisible");
                userType.AddMemberName("Opacity");
                userType.AddMemberName("MinScale");
                userType.AddMemberName("MaxScale");
                userType.AddMemberName("ID");
                userType.AddMemberName("SceneProperties");
                userType.AddMemberName("GraphicsSource");
                userType.AddMemberName("Labeling");
                userType.AddMemberName("SelectedGraphics");
                xamlType = userType;
                break;

            case 28:   //  Esri.ArcGISRuntime.Layers.GraphicCollection
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.Graphic>"));
                userType.CollectionAdd = VectorAdd_28_GraphicCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 29:   //  System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.Graphic>
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.Graphic>"));
                userType.Activator = Activate_29_ObservableCollection;
                userType.CollectionAdd = VectorAdd_29_ObservableCollection;
                xamlType = userType;
                break;

            case 30:   //  System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.Graphic>
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_30_Collection;
                userType.CollectionAdd = VectorAdd_30_Collection;
                xamlType = userType;
                break;

            case 31:   //  Esri.ArcGISRuntime.Layers.Graphic
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Data.Feature"));
                userType.Activator = Activate_31_Graphic;
                userType.AddMemberName("Attributes");
                userType.AddMemberName("Symbol");
                userType.AddMemberName("IsVisible");
                userType.AddMemberName("IsSelected");
                userType.AddMemberName("ZIndex");
                xamlType = userType;
                break;

            case 32:   //  Esri.ArcGISRuntime.Data.Feature
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Geometry");
                xamlType = userType;
                break;

            case 33:   //  System.Collections.Generic.IDictionary`2<String, Object>
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.DictionaryAdd = MapAdd_33_IDictionary;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 34:   //  Esri.ArcGISRuntime.Symbology.Symbol
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 35:   //  Int32
                xamlType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 36:   //  Esri.ArcGISRuntime.Layers.GraphicsRenderingMode
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Dynamic", global::Esri.ArcGISRuntime.Layers.GraphicsRenderingMode.Dynamic);
                userType.AddEnumValue("Static", global::Esri.ArcGISRuntime.Layers.GraphicsRenderingMode.Static);
                xamlType = userType;
                break;

            case 37:   //  Esri.ArcGISRuntime.Symbology.Renderer
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 38:   //  Esri.ArcGISRuntime.Layers.LayerSceneProperties
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 39:   //  System.Collections.Generic.IEnumerable`1<Esri.ArcGISRuntime.Layers.Graphic>
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 40:   //  Esri.ArcGISRuntime.Layers.LabelProperties
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_40_LabelProperties;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.Layers.LabelProperties.LabelClasses");
                userType.AddMemberName("LabelClasses");
                userType.AddMemberName("IsEnabled");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 41:   //  Esri.ArcGISRuntime.Layers.AttributeLabelClassCollection
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.AttributeLabelClass>"));
                userType.CollectionAdd = VectorAdd_41_AttributeLabelClassCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 42:   //  System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Layers.AttributeLabelClass>
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.AttributeLabelClass>"));
                userType.Activator = Activate_42_ObservableCollection;
                userType.CollectionAdd = VectorAdd_42_ObservableCollection;
                xamlType = userType;
                break;

            case 43:   //  System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Layers.AttributeLabelClass>
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_43_Collection;
                userType.CollectionAdd = VectorAdd_43_Collection;
                xamlType = userType;
                break;

            case 44:   //  Esri.ArcGISRuntime.Layers.AttributeLabelClass
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_44_AttributeLabelClass;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.Layers.AttributeLabelClass.Symbol");
                userType.AddMemberName("Symbol");
                userType.AddMemberName("TextExpression");
                userType.AddMemberName("DuplicateLabels");
                userType.AddMemberName("IsVisible");
                userType.AddMemberName("IsWordWrapEnabled");
                userType.AddMemberName("MaxScale");
                userType.AddMemberName("MinScale");
                userType.AddMemberName("LabelPlacement");
                userType.AddMemberName("LabelPosition");
                userType.AddMemberName("LabelPriority");
                userType.AddMemberName("WhereClause");
                userType.AddMemberName("WordWrapLength");
                xamlType = userType;
                break;

            case 45:   //  Esri.ArcGISRuntime.Symbology.TextSymbol
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol"));
                userType.Activator = Activate_45_TextSymbol;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.Symbology.TextSymbol.Font");
                userType.AddMemberName("Font");
                userType.AddMemberName("Text");
                userType.AddMemberName("Color");
                userType.AddMemberName("BackgroundColor");
                userType.AddMemberName("BorderLineColor");
                userType.AddMemberName("BorderLineSize");
                userType.AddMemberName("VerticalTextAlignment");
                userType.AddMemberName("HorizontalTextAlignment");
                userType.AddMemberName("Angle");
                userType.AddMemberName("XOffset");
                userType.AddMemberName("YOffset");
                userType.AddMemberName("AngleAlignment");
                userType.AddMemberName("IsRightToLeft");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 46:   //  Esri.ArcGISRuntime.Symbology.MarkerSymbol
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.Symbol"));
                xamlType = userType;
                break;

            case 47:   //  Esri.ArcGISRuntime.Symbology.SymbolFont
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 48:   //  Esri.ArcGISRuntime.Layers.DuplicateLabels
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("PreserveDuplicates", global::Esri.ArcGISRuntime.Layers.DuplicateLabels.PreserveDuplicates);
                userType.AddEnumValue("RemoveWithinLabelClass", global::Esri.ArcGISRuntime.Layers.DuplicateLabels.RemoveWithinLabelClass);
                userType.AddEnumValue("RemoveByGeometryTypeFromAllLayers", global::Esri.ArcGISRuntime.Layers.DuplicateLabels.RemoveByGeometryTypeFromAllLayers);
                userType.AddEnumValue("RemoveAllDuplicatesFromAllLayers", global::Esri.ArcGISRuntime.Layers.DuplicateLabels.RemoveAllDuplicatesFromAllLayers);
                xamlType = userType;
                break;

            case 49:   //  Esri.ArcGISRuntime.Layers.LabelPlacement
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("PointAboveCenter", global::Esri.ArcGISRuntime.Layers.LabelPlacement.PointAboveCenter);
                userType.AddEnumValue("PointAboveLeft", global::Esri.ArcGISRuntime.Layers.LabelPlacement.PointAboveLeft);
                userType.AddEnumValue("PointAboveRight", global::Esri.ArcGISRuntime.Layers.LabelPlacement.PointAboveRight);
                userType.AddEnumValue("PointBelowCenter", global::Esri.ArcGISRuntime.Layers.LabelPlacement.PointBelowCenter);
                userType.AddEnumValue("PointBelowLeft", global::Esri.ArcGISRuntime.Layers.LabelPlacement.PointBelowLeft);
                userType.AddEnumValue("PointBelowRight", global::Esri.ArcGISRuntime.Layers.LabelPlacement.PointBelowRight);
                userType.AddEnumValue("PointCenterCenter", global::Esri.ArcGISRuntime.Layers.LabelPlacement.PointCenterCenter);
                userType.AddEnumValue("PointCenterLeft", global::Esri.ArcGISRuntime.Layers.LabelPlacement.PointCenterLeft);
                userType.AddEnumValue("PointCenterRight", global::Esri.ArcGISRuntime.Layers.LabelPlacement.PointCenterRight);
                userType.AddEnumValue("LineAboveAfter", global::Esri.ArcGISRuntime.Layers.LabelPlacement.LineAboveAfter);
                userType.AddEnumValue("LineAboveAlong", global::Esri.ArcGISRuntime.Layers.LabelPlacement.LineAboveAlong);
                userType.AddEnumValue("LineAboveBefore", global::Esri.ArcGISRuntime.Layers.LabelPlacement.LineAboveBefore);
                userType.AddEnumValue("LineAboveStart", global::Esri.ArcGISRuntime.Layers.LabelPlacement.LineAboveStart);
                userType.AddEnumValue("LineAboveEnd", global::Esri.ArcGISRuntime.Layers.LabelPlacement.LineAboveEnd);
                userType.AddEnumValue("LineBelowAfter", global::Esri.ArcGISRuntime.Layers.LabelPlacement.LineBelowAfter);
                userType.AddEnumValue("LineBelowAlong", global::Esri.ArcGISRuntime.Layers.LabelPlacement.LineBelowAlong);
                userType.AddEnumValue("LineBelowBefore", global::Esri.ArcGISRuntime.Layers.LabelPlacement.LineBelowBefore);
                userType.AddEnumValue("LineBelowStart", global::Esri.ArcGISRuntime.Layers.LabelPlacement.LineBelowStart);
                userType.AddEnumValue("LineBelowEnd", global::Esri.ArcGISRuntime.Layers.LabelPlacement.LineBelowEnd);
                userType.AddEnumValue("LineCenterAfter", global::Esri.ArcGISRuntime.Layers.LabelPlacement.LineCenterAfter);
                userType.AddEnumValue("LineCenterAlong", global::Esri.ArcGISRuntime.Layers.LabelPlacement.LineCenterAlong);
                userType.AddEnumValue("LineCenterBefore", global::Esri.ArcGISRuntime.Layers.LabelPlacement.LineCenterBefore);
                userType.AddEnumValue("LineCenterStart", global::Esri.ArcGISRuntime.Layers.LabelPlacement.LineCenterStart);
                userType.AddEnumValue("LineCenterEnd", global::Esri.ArcGISRuntime.Layers.LabelPlacement.LineCenterEnd);
                userType.AddEnumValue("PolygonAlwaysHorizontal", global::Esri.ArcGISRuntime.Layers.LabelPlacement.PolygonAlwaysHorizontal);
                xamlType = userType;
                break;

            case 50:   //  Esri.ArcGISRuntime.Layers.LabelPosition
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("FixedPositionOrRemove", global::Esri.ArcGISRuntime.Layers.LabelPosition.FixedPositionOrRemove);
                userType.AddEnumValue("FixedPositionWithOverlaps", global::Esri.ArcGISRuntime.Layers.LabelPosition.FixedPositionWithOverlaps);
                userType.AddEnumValue("RepositionOrRemove", global::Esri.ArcGISRuntime.Layers.LabelPosition.RepositionOrRemove);
                xamlType = userType;
                break;

            case 51:   //  Esri.ArcGISRuntime.Layers.LabelPriority
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Highest", global::Esri.ArcGISRuntime.Layers.LabelPriority.Highest);
                userType.AddEnumValue("High", global::Esri.ArcGISRuntime.Layers.LabelPriority.High);
                userType.AddEnumValue("Medium", global::Esri.ArcGISRuntime.Layers.LabelPriority.Medium);
                userType.AddEnumValue("Low", global::Esri.ArcGISRuntime.Layers.LabelPriority.Low);
                userType.AddEnumValue("Lowest", global::Esri.ArcGISRuntime.Layers.LabelPriority.Lowest);
                userType.AddEnumValue("Automatic", global::Esri.ArcGISRuntime.Layers.LabelPriority.Automatic);
                userType.AddEnumValue("UseValue", global::Esri.ArcGISRuntime.Layers.LabelPriority.UseValue);
                xamlType = userType;
                break;

            case 52:   //  Esri.ArcGISRuntime.Location.LocationDisplay
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 53:   //  Esri.ArcGISRuntime.Data.TimeExtent
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 54:   //  Esri.ArcGISRuntime.Controls.OverlayItemsControl
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_54_OverlayItemsControl;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.Controls.OverlayItemsControl.Items");
                userType.AddMemberName("Items");
                xamlType = userType;
                break;

            case 55:   //  Esri.ArcGISRuntime.Controls.OverlayItemsCollection
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Object>"));
                userType.CollectionAdd = VectorAdd_55_OverlayItemsCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 56:   //  System.Collections.ObjectModel.ObservableCollection`1<Object>
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Object>"));
                userType.Activator = Activate_56_ObservableCollection;
                userType.CollectionAdd = VectorAdd_56_ObservableCollection;
                xamlType = userType;
                break;

            case 57:   //  System.Collections.ObjectModel.Collection`1<Object>
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_57_Collection;
                userType.CollectionAdd = VectorAdd_57_Collection;
                xamlType = userType;
                break;

            case 58:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 59:   //  Esri.ArcGISRuntime.Controls.ElevationSourceCollection
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Controls.ElevationSource>"));
                userType.Activator = Activate_59_ElevationSourceCollection;
                userType.CollectionAdd = VectorAdd_59_ElevationSourceCollection;
                xamlType = userType;
                break;

            case 60:   //  System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Controls.ElevationSource>
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Controls.ElevationSource>"));
                userType.Activator = Activate_60_ObservableCollection;
                userType.CollectionAdd = VectorAdd_60_ObservableCollection;
                xamlType = userType;
                break;

            case 61:   //  System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Controls.ElevationSource>
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_61_Collection;
                userType.CollectionAdd = VectorAdd_61_Collection;
                userType.AddMemberName("Count");
                xamlType = userType;
                break;

            case 62:   //  Esri.ArcGISRuntime.Controls.ElevationSource
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("ID");
                userType.AddMemberName("IsEnabled");
                xamlType = userType;
                break;

            case 63:   //  Esri.ArcGISRuntime.Controls.ServiceElevationSource
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ElevationSource"));
                userType.Activator = Activate_63_ServiceElevationSource;
                userType.AddMemberName("ServiceUri");
                userType.AddMemberName("Token");
                xamlType = userType;
                break;

            case 64:   //  Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Layers.TiledLayer"));
                userType.Activator = Activate_64_ArcGISTiledMapServiceLayer;
                userType.AddMemberName("ServiceUri");
                userType.AddMemberName("Token");
                userType.AddMemberName("ServiceInfo");
                xamlType = userType;
                break;

            case 65:   //  Esri.ArcGISRuntime.Layers.TiledLayer
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer"));
                userType.AddMemberName("TileInfo");
                userType.AddMemberName("Brightness");
                userType.AddMemberName("Contrast");
                userType.AddMemberName("Gamma");
                userType.AddMemberName("ResamplingMode");
                xamlType = userType;
                break;

            case 66:   //  Esri.ArcGISRuntime.ArcGISServices.MapServiceInfo
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.ArcGISServices.MapServiceInfoBase"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 67:   //  Esri.ArcGISRuntime.ArcGISServices.MapServiceInfoBase
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.ArcGISServices.ServiceInfo"));
                xamlType = userType;
                break;

            case 68:   //  Esri.ArcGISRuntime.ArcGISServices.ServiceInfo
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 69:   //  Esri.ArcGISRuntime.Layers.TiledLayerInitializationInfo
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Layers.LayerInitializationInfo"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 70:   //  Esri.ArcGISRuntime.Layers.LayerInitializationInfo
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 71:   //  Esri.ArcGISRuntime.Layers.TiledLayerResamplingMode
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Resample", global::Esri.ArcGISRuntime.Layers.TiledLayerResamplingMode.Resample);
                userType.AddEnumValue("None", global::Esri.ArcGISRuntime.Layers.TiledLayerResamplingMode.None);
                xamlType = userType;
                break;

            case 72:   //  ArcGIS_DOTNET_3D_Sample.MainPage
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_72_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 73:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 74:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 75:   //  Esri.ArcGISRuntime.Controls.Map
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_75_Map;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.Controls.Map.Layers");
                userType.AddMemberName("Layers");
                userType.AddMemberName("InitialViewpoint");
                userType.AddMemberName("SpatialReference");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 76:   //  Esri.ArcGISRuntime.Controls.Viewpoint
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Camera");
                userType.AddMemberName("TargetScale");
                userType.AddMemberName("TargetGeometry");
                userType.AddMemberName("Rotation");
                xamlType = userType;
                break;

            case 77:   //  Esri.ArcGISRuntime.Controls.ViewpointCenter
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Controls.Viewpoint"));
                userType.Activator = Activate_77_ViewpointCenter;
                userType.AddMemberName("Scale");
                userType.AddMemberName("X");
                userType.AddMemberName("Y");
                userType.AddMemberName("SpatialReferenceID");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 78:   //  System.Nullable`1<Double>
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 79:   //  Esri.ArcGISRuntime.Controls.ViewpointExtent
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Controls.Viewpoint"));
                userType.Activator = Activate_79_ViewpointExtent;
                userType.AddMemberName("XMin");
                userType.AddMemberName("YMin");
                userType.AddMemberName("XMax");
                userType.AddMemberName("YMax");
                userType.AddMemberName("SpatialReferenceID");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 80:   //  Esri.ArcGISRuntime.Layers.KmlDocument
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlContainer"));
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 81:   //  Esri.ArcGISRuntime.Layers.KmlContainer
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlFeature"));
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("IsPartiallyVisible");
                userType.AddMemberName("ListType");
                xamlType = userType;
                break;

            case 82:   //  Esri.ArcGISRuntime.Layers.KmlFeature
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Name");
                userType.AddMemberName("IsVisible");
                userType.AddMemberName("IsHighlighted");
                userType.AddMemberName("ChildFeatures");
                userType.AddMemberName("KmlFeatureIcon");
                userType.AddMemberName("BalloonStyle");
                userType.AddMemberName("Viewpoint");
                xamlType = userType;
                break;

            case 83:   //  Esri.ArcGISRuntime.Layers.KmlListType
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Check", global::Esri.ArcGISRuntime.Layers.KmlListType.Check);
                userType.AddEnumValue("RadioFolder", global::Esri.ArcGISRuntime.Layers.KmlListType.RadioFolder);
                userType.AddEnumValue("CheckOffOnly", global::Esri.ArcGISRuntime.Layers.KmlListType.CheckOffOnly);
                userType.AddEnumValue("CheckHideChildren", global::Esri.ArcGISRuntime.Layers.KmlListType.CheckHideChildren);
                xamlType = userType;
                break;

            case 84:   //  Esri.ArcGISRuntime.Layers.KmlFeatureCollection
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Count");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 85:   //  Esri.ArcGISRuntime.Layers.KmlFeatureIcon
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 86:   //  Esri.ArcGISRuntime.Layers.KmlBalloonStyle
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 87:   //  Esri.ArcGISRuntime.Layers.KmlFolder
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlContainer"));
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 88:   //  Esri.ArcGISRuntime.Layers.KmlNetworkLink
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlFeature"));
                userType.AddMemberName("IsUpdating");
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("IsPartiallyVisible");
                userType.AddMemberName("ListType");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 89:   //  Esri.ArcGISRuntime.Layers.KmlPlacemark
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlFeature"));
                userType.AddMemberName("GraphicType");
                userType.AddMemberName("Extent");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 90:   //  Esri.ArcGISRuntime.Layers.KmlGraphicType
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Esri.ArcGISRuntime.Layers.KmlGraphicType.None);
                userType.AddEnumValue("Point", global::Esri.ArcGISRuntime.Layers.KmlGraphicType.Point);
                userType.AddEnumValue("Polyline", global::Esri.ArcGISRuntime.Layers.KmlGraphicType.Polyline);
                userType.AddEnumValue("Polygon", global::Esri.ArcGISRuntime.Layers.KmlGraphicType.Polygon);
                userType.AddEnumValue("ExtrudedPoint", global::Esri.ArcGISRuntime.Layers.KmlGraphicType.ExtrudedPoint);
                userType.AddEnumValue("ExtrudedPolyline", global::Esri.ArcGISRuntime.Layers.KmlGraphicType.ExtrudedPolyline);
                userType.AddEnumValue("ExtrudedPolygon", global::Esri.ArcGISRuntime.Layers.KmlGraphicType.ExtrudedPolygon);
                userType.AddEnumValue("Model", global::Esri.ArcGISRuntime.Layers.KmlGraphicType.Model);
                userType.AddEnumValue("Mixed", global::Esri.ArcGISRuntime.Layers.KmlGraphicType.Mixed);
                xamlType = userType;
                break;

            case 91:   //  Esri.ArcGISRuntime.Layers.KmlGroundOverlay
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlOverlay"));
                userType.AddMemberName("Extent");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 92:   //  Esri.ArcGISRuntime.Layers.KmlOverlay
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlFeature"));
                xamlType = userType;
                break;

            case 93:   //  Esri.ArcGISRuntime.Layers.KmlPhotoOverlay
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlOverlay"));
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 94:   //  Esri.ArcGISRuntime.Layers.KmlScreenOverlay
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlOverlay"));
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 95:   //  Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneMarkerSymbol"));
                userType.Activator = Activate_95_ConeMarkerSymbol;
                userType.AddMemberName("RadiusTop");
                userType.AddMemberName("RadiusBottom");
                userType.AddMemberName("Height");
                userType.AddMemberName("SegmentCount");
                userType.AddMemberName("Color");
                userType.AddMemberName("Heading");
                userType.AddMemberName("Pitch");
                userType.AddMemberName("Roll");
                userType.AddMemberName("AnchorPosition");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 96:   //  Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneMarkerSymbol
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbol"));
                xamlType = userType;
                break;

            case 97:   //  Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbol
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.Symbol"));
                xamlType = userType;
                break;

            case 98:   //  Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbolAnchorPosition
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Bottom", global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbolAnchorPosition.Bottom);
                userType.AddEnumValue("Top", global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbolAnchorPosition.Top);
                userType.AddEnumValue("Center", global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbolAnchorPosition.Center);
                xamlType = userType;
                break;

            case 99:   //  Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeSymbol
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbol"));
                userType.Activator = Activate_99_DistanceCompositeSymbol;
                userType.AddMemberName("Infos");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 100:   //  Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfoCollection
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo>"));
                userType.CollectionAdd = VectorAdd_100_DistanceCompositeInfoCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 101:   //  System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo>
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo>"));
                userType.Activator = Activate_101_ObservableCollection;
                userType.CollectionAdd = VectorAdd_101_ObservableCollection;
                xamlType = userType;
                break;

            case 102:   //  System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo>
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_102_Collection;
                userType.CollectionAdd = VectorAdd_102_Collection;
                xamlType = userType;
                break;

            case 103:   //  Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_103_DistanceCompositeInfo;
                userType.AddMemberName("Symbol");
                userType.AddMemberName("Minimum");
                userType.AddMemberName("Maximum");
                xamlType = userType;
                break;

            case 104:   //  Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneMarkerSymbol"));
                userType.Activator = Activate_104_DiamondMarkerSymbol;
                userType.AddMemberName("Width");
                userType.AddMemberName("Height");
                userType.AddMemberName("Color");
                userType.AddMemberName("Heading");
                userType.AddMemberName("Pitch");
                userType.AddMemberName("Roll");
                userType.AddMemberName("AnchorPosition");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 105:   //  Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneMarkerSymbol"));
                userType.Activator = Activate_105_ModelMarkerSymbol;
                userType.AddMemberName("Scale");
                userType.AddMemberName("SourceUri");
                userType.AddMemberName("Heading");
                userType.AddMemberName("Pitch");
                userType.AddMemberName("Roll");
                userType.AddMemberName("AnchorPosition");
                userType.AddMemberName("Color");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 106:   //  Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneMarkerSymbol"));
                userType.Activator = Activate_106_BoxMarkerSymbol;
                userType.AddMemberName("Width");
                userType.AddMemberName("Height");
                userType.AddMemberName("Depth");
                userType.AddMemberName("Color");
                userType.AddMemberName("Heading");
                userType.AddMemberName("Pitch");
                userType.AddMemberName("Roll");
                userType.AddMemberName("AnchorPosition");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 107:   //  Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneMarkerSymbol"));
                userType.Activator = Activate_107_SphereMarkerSymbol;
                userType.AddMemberName("Radius");
                userType.AddMemberName("Color");
                userType.AddMemberName("SegmentCount");
                userType.AddMemberName("AnchorPosition");
                userType.AddMemberName("Heading");
                userType.AddMemberName("Pitch");
                userType.AddMemberName("Roll");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 108:   //  Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneMarkerSymbol"));
                userType.Activator = Activate_108_TetrahedronMarkerSymbol;
                userType.AddMemberName("Width");
                userType.AddMemberName("Height");
                userType.AddMemberName("Color");
                userType.AddMemberName("Heading");
                userType.AddMemberName("Pitch");
                userType.AddMemberName("Roll");
                userType.AddMemberName("AnchorPosition");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 109:   //  Esri.ArcGISRuntime.Symbology.SceneSymbology.TubeLineSymbol
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneLineSymbol"));
                userType.Activator = Activate_109_TubeLineSymbol;
                userType.AddMemberName("Width");
                userType.AddMemberName("Color");
                userType.AddMemberName("SegmentCount");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 110:   //  Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneLineSymbol
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbol"));
                xamlType = userType;
                break;

            case 111:   //  Esri.ArcGISRuntime.Symbology.Specialized.MultiLayerSymbol
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.Symbol"));
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 112:   //  Esri.ArcGISRuntime.Symbology.CompositeSymbol
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.Symbol"));
                userType.Activator = Activate_112_CompositeSymbol;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.Symbology.CompositeSymbol.Symbols");
                userType.AddMemberName("Symbols");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 113:   //  Esri.ArcGISRuntime.Symbology.SymbolCollection
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Symbology.Symbol>"));
                userType.CollectionAdd = VectorAdd_113_SymbolCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 114:   //  System.Collections.ObjectModel.ObservableCollection`1<Esri.ArcGISRuntime.Symbology.Symbol>
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Symbology.Symbol>"));
                userType.Activator = Activate_114_ObservableCollection;
                userType.CollectionAdd = VectorAdd_114_ObservableCollection;
                xamlType = userType;
                break;

            case 115:   //  System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Symbology.Symbol>
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_115_Collection;
                userType.CollectionAdd = VectorAdd_115_Collection;
                xamlType = userType;
                break;

            case 116:   //  Esri.ArcGISRuntime.Symbology.PictureFillSymbol
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.FillSymbol"));
                userType.Activator = Activate_116_PictureFillSymbol;
                userType.AddMemberName("Outline");
                userType.AddMemberName("Opacity");
                userType.AddMemberName("Width");
                userType.AddMemberName("Height");
                userType.AddMemberName("Angle");
                userType.AddMemberName("XOffset");
                userType.AddMemberName("YOffset");
                userType.AddMemberName("XScale");
                userType.AddMemberName("YScale");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 117:   //  Esri.ArcGISRuntime.Symbology.FillSymbol
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.Symbol"));
                xamlType = userType;
                break;

            case 118:   //  Esri.ArcGISRuntime.Symbology.SimpleLineSymbol
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.LineSymbol"));
                userType.Activator = Activate_118_SimpleLineSymbol;
                userType.AddMemberName("Width");
                userType.AddMemberName("Color");
                userType.AddMemberName("Style");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 119:   //  Esri.ArcGISRuntime.Symbology.LineSymbol
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.Symbol"));
                xamlType = userType;
                break;

            case 120:   //  Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol"));
                userType.Activator = Activate_120_PictureMarkerSymbol;
                userType.AddMemberName("Width");
                userType.AddMemberName("Height");
                userType.AddMemberName("AngleAlignment");
                userType.AddMemberName("Angle");
                userType.AddMemberName("Opacity");
                userType.AddMemberName("XOffset");
                userType.AddMemberName("YOffset");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 121:   //  Esri.ArcGISRuntime.Symbology.MarkerAngleAlignment
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Screen", global::Esri.ArcGISRuntime.Symbology.MarkerAngleAlignment.Screen);
                userType.AddEnumValue("Map", global::Esri.ArcGISRuntime.Symbology.MarkerAngleAlignment.Map);
                xamlType = userType;
                break;

            case 122:   //  Esri.ArcGISRuntime.Symbology.SimpleFillSymbol
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.FillSymbol"));
                userType.Activator = Activate_122_SimpleFillSymbol;
                userType.AddMemberName("Outline");
                userType.AddMemberName("Color");
                userType.AddMemberName("Style");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 123:   //  Esri.ArcGISRuntime.Symbology.SimpleFillStyle
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("BackwardDiagonal", global::Esri.ArcGISRuntime.Symbology.SimpleFillStyle.BackwardDiagonal);
                userType.AddEnumValue("Cross", global::Esri.ArcGISRuntime.Symbology.SimpleFillStyle.Cross);
                userType.AddEnumValue("DiagonalCross", global::Esri.ArcGISRuntime.Symbology.SimpleFillStyle.DiagonalCross);
                userType.AddEnumValue("ForwardDiagonal", global::Esri.ArcGISRuntime.Symbology.SimpleFillStyle.ForwardDiagonal);
                userType.AddEnumValue("Horizontal", global::Esri.ArcGISRuntime.Symbology.SimpleFillStyle.Horizontal);
                userType.AddEnumValue("Null", global::Esri.ArcGISRuntime.Symbology.SimpleFillStyle.Null);
                userType.AddEnumValue("Solid", global::Esri.ArcGISRuntime.Symbology.SimpleFillStyle.Solid);
                userType.AddEnumValue("Vertical", global::Esri.ArcGISRuntime.Symbology.SimpleFillStyle.Vertical);
                xamlType = userType;
                break;

            case 124:   //  Esri.ArcGISRuntime.Symbology.SimpleLineStyle
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Dash", global::Esri.ArcGISRuntime.Symbology.SimpleLineStyle.Dash);
                userType.AddEnumValue("DashDot", global::Esri.ArcGISRuntime.Symbology.SimpleLineStyle.DashDot);
                userType.AddEnumValue("DashDotDot", global::Esri.ArcGISRuntime.Symbology.SimpleLineStyle.DashDotDot);
                userType.AddEnumValue("Dot", global::Esri.ArcGISRuntime.Symbology.SimpleLineStyle.Dot);
                userType.AddEnumValue("Null", global::Esri.ArcGISRuntime.Symbology.SimpleLineStyle.Null);
                userType.AddEnumValue("Solid", global::Esri.ArcGISRuntime.Symbology.SimpleLineStyle.Solid);
                xamlType = userType;
                break;

            case 125:   //  Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol"));
                userType.Activator = Activate_125_SimpleMarkerSymbol;
                userType.AddMemberName("Outline");
                userType.AddMemberName("Size");
                userType.AddMemberName("Color");
                userType.AddMemberName("Style");
                userType.AddMemberName("Angle");
                userType.AddMemberName("XOffset");
                userType.AddMemberName("YOffset");
                userType.AddMemberName("AngleAlignment");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 126:   //  Esri.ArcGISRuntime.Symbology.SimpleMarkerStyle
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Circle", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerStyle.Circle);
                userType.AddEnumValue("Cross", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerStyle.Cross);
                userType.AddEnumValue("Diamond", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerStyle.Diamond);
                userType.AddEnumValue("Square", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerStyle.Square);
                userType.AddEnumValue("X", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerStyle.X);
                userType.AddEnumValue("Triangle", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerStyle.Triangle);
                xamlType = userType;
                break;

            case 127:   //  Esri.ArcGISRuntime.Symbology.VerticalTextAlignment
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Bottom", global::Esri.ArcGISRuntime.Symbology.VerticalTextAlignment.Bottom);
                userType.AddEnumValue("Middle", global::Esri.ArcGISRuntime.Symbology.VerticalTextAlignment.Middle);
                userType.AddEnumValue("Top", global::Esri.ArcGISRuntime.Symbology.VerticalTextAlignment.Top);
                userType.AddEnumValue("Baseline", global::Esri.ArcGISRuntime.Symbology.VerticalTextAlignment.Baseline);
                xamlType = userType;
                break;

            case 128:   //  Esri.ArcGISRuntime.Symbology.HorizontalTextAlignment
                userType = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Left", global::Esri.ArcGISRuntime.Symbology.HorizontalTextAlignment.Left);
                userType.AddEnumValue("Center", global::Esri.ArcGISRuntime.Symbology.HorizontalTextAlignment.Center);
                userType.AddEnumValue("Right", global::Esri.ArcGISRuntime.Symbology.HorizontalTextAlignment.Right);
                userType.AddEnumValue("Justify", global::Esri.ArcGISRuntime.Symbology.HorizontalTextAlignment.Justify);
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Esri.ArcGISRuntime.Metadata.XamlMetadataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Esri.ArcGISRuntime.Esri_ArcGISRuntime_WindowsPhone_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_SceneView_Scene(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.SceneView)instance;
            return that.Scene;
        }
        private void set_0_SceneView_Scene(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.SceneView)instance;
            that.Scene = (global::Esri.ArcGISRuntime.Controls.Scene)Value;
        }
        private object get_1_Scene_Layers(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Scene)instance;
            return that.Layers;
        }
        private void set_1_Scene_Layers(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Scene)instance;
            that.Layers = (global::Esri.ArcGISRuntime.Layers.LayerCollection)Value;
        }
        private object get_2_Layer_FullExtent(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.FullExtent;
        }
        private object get_3_Layer_Status(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.Status;
        }
        private object get_4_Layer_InitializationException(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.InitializationException;
        }
        private object get_5_Layer_DefaultSpatialReference(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.DefaultSpatialReference;
        }
        private object get_6_Layer_Opacity(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.Opacity;
        }
        private void set_6_Layer_Opacity(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            that.Opacity = (global::System.Double)Value;
        }
        private object get_7_Layer_IsVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.IsVisible;
        }
        private void set_7_Layer_IsVisible(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            that.IsVisible = (global::System.Boolean)Value;
        }
        private object get_8_Layer_DisplayName(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.DisplayName;
        }
        private void set_8_Layer_DisplayName(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            that.DisplayName = (global::System.String)Value;
        }
        private object get_9_Layer_ShowLegend(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.ShowLegend;
        }
        private void set_9_Layer_ShowLegend(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            that.ShowLegend = (global::System.Boolean)Value;
        }
        private object get_10_Layer_MinScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.MinScale;
        }
        private void set_10_Layer_MinScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            that.MinScale = (global::System.Double)Value;
        }
        private object get_11_Layer_MaxScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.MaxScale;
        }
        private void set_11_Layer_MaxScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            that.MaxScale = (global::System.Double)Value;
        }
        private object get_12_Layer_ID(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            return that.ID;
        }
        private void set_12_Layer_ID(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Layer)instance;
            that.ID = (global::System.String)Value;
        }
        private object get_13_SceneView_Labeling(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.SceneView)instance;
            return that.Labeling;
        }
        private void set_13_SceneView_Labeling(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.SceneView)instance;
            that.Labeling = (global::Esri.ArcGISRuntime.Controls.ViewLabelProperties)Value;
        }
        private object get_14_SceneView_IsShadowsEnabled(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.SceneView)instance;
            return that.IsShadowsEnabled;
        }
        private void set_14_SceneView_IsShadowsEnabled(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.SceneView)instance;
            that.IsShadowsEnabled = (global::System.Boolean)Value;
        }
        private object get_15_SceneView_LightPoint(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.SceneView)instance;
            return that.LightPoint;
        }
        private void set_15_SceneView_LightPoint(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.SceneView)instance;
            that.LightPoint = (global::Esri.ArcGISRuntime.Geometry.MapPoint)Value;
        }
        private object get_16_SceneView_AmbientLight(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.SceneView)instance;
            return that.AmbientLight;
        }
        private void set_16_SceneView_AmbientLight(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.SceneView)instance;
            that.AmbientLight = (global::Windows.UI.Color)Value;
        }
        private object get_17_SceneView_SpatialReference(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.SceneView)instance;
            return that.SpatialReference;
        }
        private object get_18_SceneView_Camera(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.SceneView)instance;
            return that.Camera;
        }
        private object get_19_SceneView_IsWrapAroundActive(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.SceneView)instance;
            return that.IsWrapAroundActive;
        }
        private object get_20_SceneView_ElevationExaggeration(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.SceneView)instance;
            return that.ElevationExaggeration;
        }
        private void set_20_SceneView_ElevationExaggeration(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.SceneView)instance;
            that.ElevationExaggeration = (global::System.Double)Value;
        }
        private object get_21_ViewBase_GraphicsOverlays(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewBase)instance;
            return that.GraphicsOverlays;
        }
        private void set_21_ViewBase_GraphicsOverlays(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewBase)instance;
            that.GraphicsOverlays = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlayCollection)Value;
        }
        private object get_22_GraphicsOverlay_Graphics(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            return that.Graphics;
        }
        private void set_22_GraphicsOverlay_Graphics(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            that.Graphics = (global::Esri.ArcGISRuntime.Layers.GraphicCollection)Value;
        }
        private object get_23_Graphic_Attributes(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Graphic)instance;
            return that.Attributes;
        }
        private object get_24_Graphic_Symbol(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Graphic)instance;
            return that.Symbol;
        }
        private void set_24_Graphic_Symbol(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Graphic)instance;
            that.Symbol = (global::Esri.ArcGISRuntime.Symbology.Symbol)Value;
        }
        private object get_25_Graphic_IsVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Graphic)instance;
            return that.IsVisible;
        }
        private void set_25_Graphic_IsVisible(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Graphic)instance;
            that.IsVisible = (global::System.Boolean)Value;
        }
        private object get_26_Graphic_IsSelected(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Graphic)instance;
            return that.IsSelected;
        }
        private void set_26_Graphic_IsSelected(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Graphic)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_27_Graphic_ZIndex(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Graphic)instance;
            return that.ZIndex;
        }
        private void set_27_Graphic_ZIndex(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.Graphic)instance;
            that.ZIndex = (global::System.Int32)Value;
        }
        private object get_28_Feature_Geometry(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Data.Feature)instance;
            return that.Geometry;
        }
        private void set_28_Feature_Geometry(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Data.Feature)instance;
            that.Geometry = (global::Esri.ArcGISRuntime.Geometry.Geometry)Value;
        }
        private object get_29_GraphicsOverlay_RenderingMode(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            return that.RenderingMode;
        }
        private void set_29_GraphicsOverlay_RenderingMode(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            that.RenderingMode = (global::Esri.ArcGISRuntime.Layers.GraphicsRenderingMode)Value;
        }
        private object get_30_GraphicsOverlay_SelectionColor(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            return that.SelectionColor;
        }
        private void set_30_GraphicsOverlay_SelectionColor(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            that.SelectionColor = (global::Windows.UI.Color)Value;
        }
        private object get_31_GraphicsOverlay_Renderer(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            return that.Renderer;
        }
        private void set_31_GraphicsOverlay_Renderer(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            that.Renderer = (global::Esri.ArcGISRuntime.Symbology.Renderer)Value;
        }
        private object get_32_GraphicsOverlay_IsVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            return that.IsVisible;
        }
        private void set_32_GraphicsOverlay_IsVisible(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            that.IsVisible = (global::System.Boolean)Value;
        }
        private object get_33_GraphicsOverlay_Opacity(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            return that.Opacity;
        }
        private void set_33_GraphicsOverlay_Opacity(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            that.Opacity = (global::System.Double)Value;
        }
        private object get_34_GraphicsOverlay_MinScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            return that.MinScale;
        }
        private void set_34_GraphicsOverlay_MinScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            that.MinScale = (global::System.Double)Value;
        }
        private object get_35_GraphicsOverlay_MaxScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            return that.MaxScale;
        }
        private void set_35_GraphicsOverlay_MaxScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            that.MaxScale = (global::System.Double)Value;
        }
        private object get_36_GraphicsOverlay_ID(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            return that.ID;
        }
        private void set_36_GraphicsOverlay_ID(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            that.ID = (global::System.String)Value;
        }
        private object get_37_GraphicsOverlay_SceneProperties(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            return that.SceneProperties;
        }
        private void set_37_GraphicsOverlay_SceneProperties(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            that.SceneProperties = (global::Esri.ArcGISRuntime.Layers.LayerSceneProperties)Value;
        }
        private object get_38_GraphicsOverlay_GraphicsSource(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            return that.GraphicsSource;
        }
        private void set_38_GraphicsOverlay_GraphicsSource(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            that.GraphicsSource = (global::System.Collections.Generic.IEnumerable<global::Esri.ArcGISRuntime.Layers.Graphic>)Value;
        }
        private object get_39_GraphicsOverlay_Labeling(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            return that.Labeling;
        }
        private void set_39_GraphicsOverlay_Labeling(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            that.Labeling = (global::Esri.ArcGISRuntime.Layers.LabelProperties)Value;
        }
        private object get_40_LabelProperties_LabelClasses(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LabelProperties)instance;
            return that.LabelClasses;
        }
        private void set_40_LabelProperties_LabelClasses(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LabelProperties)instance;
            that.LabelClasses = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClassCollection)Value;
        }
        private object get_41_AttributeLabelClass_Symbol(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            return that.Symbol;
        }
        private void set_41_AttributeLabelClass_Symbol(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            that.Symbol = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)Value;
        }
        private object get_42_TextSymbol_Font(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.Font;
        }
        private void set_42_TextSymbol_Font(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.Font = (global::Esri.ArcGISRuntime.Symbology.SymbolFont)Value;
        }
        private object get_43_AttributeLabelClass_TextExpression(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            return that.TextExpression;
        }
        private void set_43_AttributeLabelClass_TextExpression(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            that.TextExpression = (global::System.String)Value;
        }
        private object get_44_AttributeLabelClass_DuplicateLabels(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            return that.DuplicateLabels;
        }
        private void set_44_AttributeLabelClass_DuplicateLabels(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            that.DuplicateLabels = (global::Esri.ArcGISRuntime.Layers.DuplicateLabels)Value;
        }
        private object get_45_AttributeLabelClass_IsVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            return that.IsVisible;
        }
        private void set_45_AttributeLabelClass_IsVisible(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            that.IsVisible = (global::System.Boolean)Value;
        }
        private object get_46_AttributeLabelClass_IsWordWrapEnabled(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            return that.IsWordWrapEnabled;
        }
        private void set_46_AttributeLabelClass_IsWordWrapEnabled(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            that.IsWordWrapEnabled = (global::System.Boolean)Value;
        }
        private object get_47_AttributeLabelClass_MaxScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            return that.MaxScale;
        }
        private void set_47_AttributeLabelClass_MaxScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            that.MaxScale = (global::System.Double)Value;
        }
        private object get_48_AttributeLabelClass_MinScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            return that.MinScale;
        }
        private void set_48_AttributeLabelClass_MinScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            that.MinScale = (global::System.Double)Value;
        }
        private object get_49_AttributeLabelClass_LabelPlacement(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            return that.LabelPlacement;
        }
        private void set_49_AttributeLabelClass_LabelPlacement(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            that.LabelPlacement = (global::Esri.ArcGISRuntime.Layers.LabelPlacement)Value;
        }
        private object get_50_AttributeLabelClass_LabelPosition(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            return that.LabelPosition;
        }
        private void set_50_AttributeLabelClass_LabelPosition(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            that.LabelPosition = (global::Esri.ArcGISRuntime.Layers.LabelPosition)Value;
        }
        private object get_51_AttributeLabelClass_LabelPriority(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            return that.LabelPriority;
        }
        private void set_51_AttributeLabelClass_LabelPriority(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            that.LabelPriority = (global::Esri.ArcGISRuntime.Layers.LabelPriority)Value;
        }
        private object get_52_AttributeLabelClass_WhereClause(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            return that.WhereClause;
        }
        private void set_52_AttributeLabelClass_WhereClause(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            that.WhereClause = (global::System.String)Value;
        }
        private object get_53_AttributeLabelClass_WordWrapLength(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            return that.WordWrapLength;
        }
        private void set_53_AttributeLabelClass_WordWrapLength(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.AttributeLabelClass)instance;
            that.WordWrapLength = (global::System.Int32)Value;
        }
        private object get_54_GraphicsOverlay_SelectedGraphics(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.GraphicsOverlay)instance;
            return that.SelectedGraphics;
        }
        private object get_55_ViewBase_LocationDisplay(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewBase)instance;
            return that.LocationDisplay;
        }
        private void set_55_ViewBase_LocationDisplay(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewBase)instance;
            that.LocationDisplay = (global::Esri.ArcGISRuntime.Location.LocationDisplay)Value;
        }
        private object get_56_ViewBase_TimeExtent(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewBase)instance;
            return that.TimeExtent;
        }
        private void set_56_ViewBase_TimeExtent(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewBase)instance;
            that.TimeExtent = (global::Esri.ArcGISRuntime.Data.TimeExtent)Value;
        }
        private object get_57_ViewBase_IsNavigating(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewBase)instance;
            return that.IsNavigating;
        }
        private void set_57_ViewBase_IsNavigating(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewBase)instance;
            that.IsNavigating = (global::System.Boolean)Value;
        }
        private object get_58_ViewBase_Overlays(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewBase)instance;
            return that.Overlays;
        }
        private void set_58_ViewBase_Overlays(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewBase)instance;
            that.Overlays = (global::Esri.ArcGISRuntime.Controls.OverlayItemsControl)Value;
        }
        private object get_59_OverlayItemsControl_Items(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.OverlayItemsControl)instance;
            return that.Items;
        }
        private object get_60_ViewBase_IsLogoVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewBase)instance;
            return that.IsLogoVisible;
        }
        private void set_60_ViewBase_IsLogoVisible(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewBase)instance;
            that.IsLogoVisible = (global::System.Boolean)Value;
        }
        private object get_61_ViewBase_ViewOverlayAnchor(object instance)
        {
            return global::Esri.ArcGISRuntime.Controls.ViewBase.GetViewOverlayAnchor((global::Windows.UI.Xaml.FrameworkElement)instance);
        }
        private void set_61_ViewBase_ViewOverlayAnchor(object instance, object Value)
        {
            global::Esri.ArcGISRuntime.Controls.ViewBase.SetViewOverlayAnchor((global::Windows.UI.Xaml.FrameworkElement)instance, (global::Esri.ArcGISRuntime.Geometry.MapPoint)Value);
        }
        private object get_62_Scene_Surface(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Scene)instance;
            return that.Surface;
        }
        private void set_62_Scene_Surface(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Scene)instance;
            that.Surface = (global::Esri.ArcGISRuntime.Controls.ElevationSourceCollection)Value;
        }
        private object get_63_ElevationSource_ID(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ElevationSource)instance;
            return that.ID;
        }
        private void set_63_ElevationSource_ID(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ElevationSource)instance;
            that.ID = (global::System.String)Value;
        }
        private object get_64_ElevationSource_IsEnabled(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ElevationSource)instance;
            return that.IsEnabled;
        }
        private void set_64_ElevationSource_IsEnabled(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ElevationSource)instance;
            that.IsEnabled = (global::System.Boolean)Value;
        }
        private object get_65_Collection_Count(object instance)
        {
            var that = (global::System.Collections.ObjectModel.Collection<global::Esri.ArcGISRuntime.Controls.ElevationSource>)instance;
            return that.Count;
        }
        private object get_66_ServiceElevationSource_ServiceUri(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ServiceElevationSource)instance;
            return that.ServiceUri;
        }
        private void set_66_ServiceElevationSource_ServiceUri(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ServiceElevationSource)instance;
            that.ServiceUri = (global::System.String)Value;
        }
        private object get_67_ServiceElevationSource_Token(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ServiceElevationSource)instance;
            return that.Token;
        }
        private void set_67_ServiceElevationSource_Token(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ServiceElevationSource)instance;
            that.Token = (global::System.String)Value;
        }
        private object get_68_ArcGISTiledMapServiceLayer_ServiceUri(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer)instance;
            return that.ServiceUri;
        }
        private void set_68_ArcGISTiledMapServiceLayer_ServiceUri(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer)instance;
            that.ServiceUri = (global::System.String)Value;
        }
        private object get_69_ArcGISTiledMapServiceLayer_Token(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer)instance;
            return that.Token;
        }
        private void set_69_ArcGISTiledMapServiceLayer_Token(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer)instance;
            that.Token = (global::System.String)Value;
        }
        private object get_70_ArcGISTiledMapServiceLayer_ServiceInfo(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer)instance;
            return that.ServiceInfo;
        }
        private object get_71_TiledLayer_TileInfo(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.TiledLayer)instance;
            return that.TileInfo;
        }
        private object get_72_TiledLayer_Brightness(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.TiledLayer)instance;
            return that.Brightness;
        }
        private void set_72_TiledLayer_Brightness(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.TiledLayer)instance;
            that.Brightness = (global::System.Double)Value;
        }
        private object get_73_TiledLayer_Contrast(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.TiledLayer)instance;
            return that.Contrast;
        }
        private void set_73_TiledLayer_Contrast(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.TiledLayer)instance;
            that.Contrast = (global::System.Double)Value;
        }
        private object get_74_TiledLayer_Gamma(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.TiledLayer)instance;
            return that.Gamma;
        }
        private void set_74_TiledLayer_Gamma(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.TiledLayer)instance;
            that.Gamma = (global::System.Double)Value;
        }
        private object get_75_TiledLayer_ResamplingMode(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.TiledLayer)instance;
            return that.ResamplingMode;
        }
        private void set_75_TiledLayer_ResamplingMode(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.TiledLayer)instance;
            that.ResamplingMode = (global::Esri.ArcGISRuntime.Layers.TiledLayerResamplingMode)Value;
        }
        private object get_76_Map_Layers(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Map)instance;
            return that.Layers;
        }
        private void set_76_Map_Layers(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Map)instance;
            that.Layers = (global::Esri.ArcGISRuntime.Layers.LayerCollection)Value;
        }
        private object get_77_Map_InitialViewpoint(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Map)instance;
            return that.InitialViewpoint;
        }
        private void set_77_Map_InitialViewpoint(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Map)instance;
            that.InitialViewpoint = (global::Esri.ArcGISRuntime.Controls.Viewpoint)Value;
        }
        private object get_78_Map_SpatialReference(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Map)instance;
            return that.SpatialReference;
        }
        private void set_78_Map_SpatialReference(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Map)instance;
            that.SpatialReference = (global::Esri.ArcGISRuntime.Geometry.SpatialReference)Value;
        }
        private object get_79_ViewpointCenter_Scale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointCenter)instance;
            return that.Scale;
        }
        private void set_79_ViewpointCenter_Scale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointCenter)instance;
            that.Scale = (global::System.Double)Value;
        }
        private object get_80_ViewpointCenter_X(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointCenter)instance;
            return that.X;
        }
        private void set_80_ViewpointCenter_X(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointCenter)instance;
            that.X = (global::System.Double)Value;
        }
        private object get_81_ViewpointCenter_Y(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointCenter)instance;
            return that.Y;
        }
        private void set_81_ViewpointCenter_Y(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointCenter)instance;
            that.Y = (global::System.Double)Value;
        }
        private object get_82_ViewpointCenter_SpatialReferenceID(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointCenter)instance;
            return that.SpatialReferenceID;
        }
        private void set_82_ViewpointCenter_SpatialReferenceID(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointCenter)instance;
            that.SpatialReferenceID = (global::System.Int32)Value;
        }
        private object get_83_Viewpoint_Camera(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Viewpoint)instance;
            return that.Camera;
        }
        private object get_84_Viewpoint_TargetScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Viewpoint)instance;
            return that.TargetScale;
        }
        private object get_85_Viewpoint_TargetGeometry(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Viewpoint)instance;
            return that.TargetGeometry;
        }
        private object get_86_Viewpoint_Rotation(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Viewpoint)instance;
            return that.Rotation;
        }
        private void set_86_Viewpoint_Rotation(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.Viewpoint)instance;
            that.Rotation = (global::System.Double)Value;
        }
        private object get_87_ViewpointExtent_XMin(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointExtent)instance;
            return that.XMin;
        }
        private void set_87_ViewpointExtent_XMin(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointExtent)instance;
            that.XMin = (global::System.Double)Value;
        }
        private object get_88_ViewpointExtent_YMin(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointExtent)instance;
            return that.YMin;
        }
        private void set_88_ViewpointExtent_YMin(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointExtent)instance;
            that.YMin = (global::System.Double)Value;
        }
        private object get_89_ViewpointExtent_XMax(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointExtent)instance;
            return that.XMax;
        }
        private void set_89_ViewpointExtent_XMax(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointExtent)instance;
            that.XMax = (global::System.Double)Value;
        }
        private object get_90_ViewpointExtent_YMax(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointExtent)instance;
            return that.YMax;
        }
        private void set_90_ViewpointExtent_YMax(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointExtent)instance;
            that.YMax = (global::System.Double)Value;
        }
        private object get_91_ViewpointExtent_SpatialReferenceID(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointExtent)instance;
            return that.SpatialReferenceID;
        }
        private void set_91_ViewpointExtent_SpatialReferenceID(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Controls.ViewpointExtent)instance;
            that.SpatialReferenceID = (global::System.Int32)Value;
        }
        private object get_92_KmlContainer_IsOpen(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.KmlContainer)instance;
            return that.IsOpen;
        }
        private void set_92_KmlContainer_IsOpen(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.KmlContainer)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_93_KmlContainer_IsPartiallyVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.KmlContainer)instance;
            return that.IsPartiallyVisible;
        }
        private object get_94_KmlContainer_ListType(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.KmlContainer)instance;
            return that.ListType;
        }
        private object get_95_KmlFeature_Name(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.KmlFeature)instance;
            return that.Name;
        }
        private object get_96_KmlFeature_IsVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.KmlFeature)instance;
            return that.IsVisible;
        }
        private void set_96_KmlFeature_IsVisible(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.KmlFeature)instance;
            that.IsVisible = (global::System.Boolean)Value;
        }
        private object get_97_KmlFeature_IsHighlighted(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.KmlFeature)instance;
            return that.IsHighlighted;
        }
        private void set_97_KmlFeature_IsHighlighted(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.KmlFeature)instance;
            that.IsHighlighted = (global::System.Boolean)Value;
        }
        private object get_98_KmlFeature_ChildFeatures(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.KmlFeature)instance;
            return that.ChildFeatures;
        }
        private object get_99_KmlFeature_KmlFeatureIcon(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.KmlFeature)instance;
            return that.KmlFeatureIcon;
        }
        private object get_100_KmlFeature_BalloonStyle(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.KmlFeature)instance;
            return that.BalloonStyle;
        }
        private object get_101_KmlFeature_Viewpoint(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.KmlFeature)instance;
            return that.Viewpoint;
        }
        private object get_102_KmlFeatureCollection_Count(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.KmlFeatureCollection)instance;
            return that.Count;
        }
        private object get_103_KmlNetworkLink_IsUpdating(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.KmlNetworkLink)instance;
            return that.IsUpdating;
        }
        private object get_104_KmlNetworkLink_IsOpen(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.KmlNetworkLink)instance;
            return that.IsOpen;
        }
        private void set_104_KmlNetworkLink_IsOpen(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.KmlNetworkLink)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_105_KmlNetworkLink_IsPartiallyVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.KmlNetworkLink)instance;
            return that.IsPartiallyVisible;
        }
        private object get_106_KmlNetworkLink_ListType(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.KmlNetworkLink)instance;
            return that.ListType;
        }
        private object get_107_KmlPlacemark_GraphicType(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.KmlPlacemark)instance;
            return that.GraphicType;
        }
        private object get_108_KmlPlacemark_Extent(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.KmlPlacemark)instance;
            return that.Extent;
        }
        private object get_109_KmlGroundOverlay_Extent(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.KmlGroundOverlay)instance;
            return that.Extent;
        }
        private object get_110_LabelProperties_IsEnabled(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LabelProperties)instance;
            return that.IsEnabled;
        }
        private void set_110_LabelProperties_IsEnabled(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Layers.LabelProperties)instance;
            that.IsEnabled = (global::System.Boolean)Value;
        }
        private object get_111_ConeMarkerSymbol_RadiusTop(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol)instance;
            return that.RadiusTop;
        }
        private void set_111_ConeMarkerSymbol_RadiusTop(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol)instance;
            that.RadiusTop = (global::System.Double)Value;
        }
        private object get_112_ConeMarkerSymbol_RadiusBottom(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol)instance;
            return that.RadiusBottom;
        }
        private void set_112_ConeMarkerSymbol_RadiusBottom(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol)instance;
            that.RadiusBottom = (global::System.Double)Value;
        }
        private object get_113_ConeMarkerSymbol_Height(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol)instance;
            return that.Height;
        }
        private void set_113_ConeMarkerSymbol_Height(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol)instance;
            that.Height = (global::System.Double)Value;
        }
        private object get_114_ConeMarkerSymbol_SegmentCount(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol)instance;
            return that.SegmentCount;
        }
        private void set_114_ConeMarkerSymbol_SegmentCount(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol)instance;
            that.SegmentCount = (global::System.Int32)Value;
        }
        private object get_115_ConeMarkerSymbol_Color(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol)instance;
            return that.Color;
        }
        private void set_115_ConeMarkerSymbol_Color(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_116_ConeMarkerSymbol_Heading(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol)instance;
            return that.Heading;
        }
        private void set_116_ConeMarkerSymbol_Heading(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol)instance;
            that.Heading = (global::System.Double)Value;
        }
        private object get_117_ConeMarkerSymbol_Pitch(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol)instance;
            return that.Pitch;
        }
        private void set_117_ConeMarkerSymbol_Pitch(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol)instance;
            that.Pitch = (global::System.Double)Value;
        }
        private object get_118_ConeMarkerSymbol_Roll(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol)instance;
            return that.Roll;
        }
        private void set_118_ConeMarkerSymbol_Roll(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol)instance;
            that.Roll = (global::System.Double)Value;
        }
        private object get_119_ConeMarkerSymbol_AnchorPosition(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol)instance;
            return that.AnchorPosition;
        }
        private void set_119_ConeMarkerSymbol_AnchorPosition(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol)instance;
            that.AnchorPosition = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbolAnchorPosition)Value;
        }
        private object get_120_DistanceCompositeSymbol_Infos(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeSymbol)instance;
            return that.Infos;
        }
        private void set_120_DistanceCompositeSymbol_Infos(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeSymbol)instance;
            that.Infos = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfoCollection)Value;
        }
        private object get_121_DistanceCompositeInfo_Symbol(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo)instance;
            return that.Symbol;
        }
        private void set_121_DistanceCompositeInfo_Symbol(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo)instance;
            that.Symbol = (global::Esri.ArcGISRuntime.Symbology.Symbol)Value;
        }
        private object get_122_DistanceCompositeInfo_Minimum(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo)instance;
            return that.Minimum;
        }
        private void set_122_DistanceCompositeInfo_Minimum(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo)instance;
            that.Minimum = (global::System.Double)Value;
        }
        private object get_123_DistanceCompositeInfo_Maximum(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo)instance;
            return that.Maximum;
        }
        private void set_123_DistanceCompositeInfo_Maximum(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo)instance;
            that.Maximum = (global::System.Double)Value;
        }
        private object get_124_DiamondMarkerSymbol_Width(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol)instance;
            return that.Width;
        }
        private void set_124_DiamondMarkerSymbol_Width(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_125_DiamondMarkerSymbol_Height(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol)instance;
            return that.Height;
        }
        private void set_125_DiamondMarkerSymbol_Height(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol)instance;
            that.Height = (global::System.Double)Value;
        }
        private object get_126_DiamondMarkerSymbol_Color(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol)instance;
            return that.Color;
        }
        private void set_126_DiamondMarkerSymbol_Color(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_127_DiamondMarkerSymbol_Heading(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol)instance;
            return that.Heading;
        }
        private void set_127_DiamondMarkerSymbol_Heading(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol)instance;
            that.Heading = (global::System.Double)Value;
        }
        private object get_128_DiamondMarkerSymbol_Pitch(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol)instance;
            return that.Pitch;
        }
        private void set_128_DiamondMarkerSymbol_Pitch(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol)instance;
            that.Pitch = (global::System.Double)Value;
        }
        private object get_129_DiamondMarkerSymbol_Roll(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol)instance;
            return that.Roll;
        }
        private void set_129_DiamondMarkerSymbol_Roll(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol)instance;
            that.Roll = (global::System.Double)Value;
        }
        private object get_130_DiamondMarkerSymbol_AnchorPosition(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol)instance;
            return that.AnchorPosition;
        }
        private void set_130_DiamondMarkerSymbol_AnchorPosition(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol)instance;
            that.AnchorPosition = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbolAnchorPosition)Value;
        }
        private object get_131_ModelMarkerSymbol_Scale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol)instance;
            return that.Scale;
        }
        private void set_131_ModelMarkerSymbol_Scale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol)instance;
            that.Scale = (global::System.Double)Value;
        }
        private object get_132_ModelMarkerSymbol_SourceUri(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol)instance;
            return that.SourceUri;
        }
        private void set_132_ModelMarkerSymbol_SourceUri(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol)instance;
            that.SourceUri = (global::System.String)Value;
        }
        private object get_133_ModelMarkerSymbol_Heading(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol)instance;
            return that.Heading;
        }
        private void set_133_ModelMarkerSymbol_Heading(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol)instance;
            that.Heading = (global::System.Double)Value;
        }
        private object get_134_ModelMarkerSymbol_Pitch(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol)instance;
            return that.Pitch;
        }
        private void set_134_ModelMarkerSymbol_Pitch(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol)instance;
            that.Pitch = (global::System.Double)Value;
        }
        private object get_135_ModelMarkerSymbol_Roll(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol)instance;
            return that.Roll;
        }
        private void set_135_ModelMarkerSymbol_Roll(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol)instance;
            that.Roll = (global::System.Double)Value;
        }
        private object get_136_ModelMarkerSymbol_AnchorPosition(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol)instance;
            return that.AnchorPosition;
        }
        private void set_136_ModelMarkerSymbol_AnchorPosition(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol)instance;
            that.AnchorPosition = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbolAnchorPosition)Value;
        }
        private object get_137_ModelMarkerSymbol_Color(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol)instance;
            return that.Color;
        }
        private void set_137_ModelMarkerSymbol_Color(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_138_BoxMarkerSymbol_Width(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol)instance;
            return that.Width;
        }
        private void set_138_BoxMarkerSymbol_Width(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_139_BoxMarkerSymbol_Height(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol)instance;
            return that.Height;
        }
        private void set_139_BoxMarkerSymbol_Height(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol)instance;
            that.Height = (global::System.Double)Value;
        }
        private object get_140_BoxMarkerSymbol_Depth(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol)instance;
            return that.Depth;
        }
        private void set_140_BoxMarkerSymbol_Depth(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol)instance;
            that.Depth = (global::System.Double)Value;
        }
        private object get_141_BoxMarkerSymbol_Color(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol)instance;
            return that.Color;
        }
        private void set_141_BoxMarkerSymbol_Color(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_142_BoxMarkerSymbol_Heading(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol)instance;
            return that.Heading;
        }
        private void set_142_BoxMarkerSymbol_Heading(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol)instance;
            that.Heading = (global::System.Double)Value;
        }
        private object get_143_BoxMarkerSymbol_Pitch(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol)instance;
            return that.Pitch;
        }
        private void set_143_BoxMarkerSymbol_Pitch(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol)instance;
            that.Pitch = (global::System.Double)Value;
        }
        private object get_144_BoxMarkerSymbol_Roll(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol)instance;
            return that.Roll;
        }
        private void set_144_BoxMarkerSymbol_Roll(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol)instance;
            that.Roll = (global::System.Double)Value;
        }
        private object get_145_BoxMarkerSymbol_AnchorPosition(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol)instance;
            return that.AnchorPosition;
        }
        private void set_145_BoxMarkerSymbol_AnchorPosition(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol)instance;
            that.AnchorPosition = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbolAnchorPosition)Value;
        }
        private object get_146_SphereMarkerSymbol_Radius(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol)instance;
            return that.Radius;
        }
        private void set_146_SphereMarkerSymbol_Radius(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol)instance;
            that.Radius = (global::System.Double)Value;
        }
        private object get_147_SphereMarkerSymbol_Color(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol)instance;
            return that.Color;
        }
        private void set_147_SphereMarkerSymbol_Color(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_148_SphereMarkerSymbol_SegmentCount(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol)instance;
            return that.SegmentCount;
        }
        private void set_148_SphereMarkerSymbol_SegmentCount(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol)instance;
            that.SegmentCount = (global::System.Int32)Value;
        }
        private object get_149_SphereMarkerSymbol_AnchorPosition(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol)instance;
            return that.AnchorPosition;
        }
        private void set_149_SphereMarkerSymbol_AnchorPosition(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol)instance;
            that.AnchorPosition = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbolAnchorPosition)Value;
        }
        private object get_150_SphereMarkerSymbol_Heading(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol)instance;
            return that.Heading;
        }
        private void set_150_SphereMarkerSymbol_Heading(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol)instance;
            that.Heading = (global::System.Double)Value;
        }
        private object get_151_SphereMarkerSymbol_Pitch(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol)instance;
            return that.Pitch;
        }
        private void set_151_SphereMarkerSymbol_Pitch(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol)instance;
            that.Pitch = (global::System.Double)Value;
        }
        private object get_152_SphereMarkerSymbol_Roll(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol)instance;
            return that.Roll;
        }
        private void set_152_SphereMarkerSymbol_Roll(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol)instance;
            that.Roll = (global::System.Double)Value;
        }
        private object get_153_TetrahedronMarkerSymbol_Width(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol)instance;
            return that.Width;
        }
        private void set_153_TetrahedronMarkerSymbol_Width(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_154_TetrahedronMarkerSymbol_Height(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol)instance;
            return that.Height;
        }
        private void set_154_TetrahedronMarkerSymbol_Height(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol)instance;
            that.Height = (global::System.Double)Value;
        }
        private object get_155_TetrahedronMarkerSymbol_Color(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol)instance;
            return that.Color;
        }
        private void set_155_TetrahedronMarkerSymbol_Color(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_156_TetrahedronMarkerSymbol_Heading(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol)instance;
            return that.Heading;
        }
        private void set_156_TetrahedronMarkerSymbol_Heading(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol)instance;
            that.Heading = (global::System.Double)Value;
        }
        private object get_157_TetrahedronMarkerSymbol_Pitch(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol)instance;
            return that.Pitch;
        }
        private void set_157_TetrahedronMarkerSymbol_Pitch(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol)instance;
            that.Pitch = (global::System.Double)Value;
        }
        private object get_158_TetrahedronMarkerSymbol_Roll(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol)instance;
            return that.Roll;
        }
        private void set_158_TetrahedronMarkerSymbol_Roll(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol)instance;
            that.Roll = (global::System.Double)Value;
        }
        private object get_159_TetrahedronMarkerSymbol_AnchorPosition(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol)instance;
            return that.AnchorPosition;
        }
        private void set_159_TetrahedronMarkerSymbol_AnchorPosition(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol)instance;
            that.AnchorPosition = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbolAnchorPosition)Value;
        }
        private object get_160_TubeLineSymbol_Width(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TubeLineSymbol)instance;
            return that.Width;
        }
        private void set_160_TubeLineSymbol_Width(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TubeLineSymbol)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_161_TubeLineSymbol_Color(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TubeLineSymbol)instance;
            return that.Color;
        }
        private void set_161_TubeLineSymbol_Color(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TubeLineSymbol)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_162_TubeLineSymbol_SegmentCount(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TubeLineSymbol)instance;
            return that.SegmentCount;
        }
        private void set_162_TubeLineSymbol_SegmentCount(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SceneSymbology.TubeLineSymbol)instance;
            that.SegmentCount = (global::System.Int32)Value;
        }
        private object get_163_CompositeSymbol_Symbols(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.CompositeSymbol)instance;
            return that.Symbols;
        }
        private void set_163_CompositeSymbol_Symbols(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.CompositeSymbol)instance;
            that.Symbols = (global::Esri.ArcGISRuntime.Symbology.SymbolCollection)Value;
        }
        private object get_164_PictureFillSymbol_Outline(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.Outline;
        }
        private void set_164_PictureFillSymbol_Outline(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.Outline = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)Value;
        }
        private object get_165_PictureFillSymbol_Opacity(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.Opacity;
        }
        private void set_165_PictureFillSymbol_Opacity(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.Opacity = (global::System.Double)Value;
        }
        private object get_166_PictureFillSymbol_Width(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.Width;
        }
        private void set_166_PictureFillSymbol_Width(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_167_PictureFillSymbol_Height(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.Height;
        }
        private void set_167_PictureFillSymbol_Height(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.Height = (global::System.Double)Value;
        }
        private object get_168_PictureFillSymbol_Angle(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.Angle;
        }
        private void set_168_PictureFillSymbol_Angle(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.Angle = (global::System.Double)Value;
        }
        private object get_169_PictureFillSymbol_XOffset(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.XOffset;
        }
        private void set_169_PictureFillSymbol_XOffset(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.XOffset = (global::System.Double)Value;
        }
        private object get_170_PictureFillSymbol_YOffset(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.YOffset;
        }
        private void set_170_PictureFillSymbol_YOffset(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.YOffset = (global::System.Double)Value;
        }
        private object get_171_PictureFillSymbol_XScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.XScale;
        }
        private void set_171_PictureFillSymbol_XScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.XScale = (global::System.Double)Value;
        }
        private object get_172_PictureFillSymbol_YScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.YScale;
        }
        private void set_172_PictureFillSymbol_YScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.YScale = (global::System.Double)Value;
        }
        private object get_173_PictureMarkerSymbol_Width(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            return that.Width;
        }
        private void set_173_PictureMarkerSymbol_Width(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_174_PictureMarkerSymbol_Height(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            return that.Height;
        }
        private void set_174_PictureMarkerSymbol_Height(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            that.Height = (global::System.Double)Value;
        }
        private object get_175_PictureMarkerSymbol_AngleAlignment(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            return that.AngleAlignment;
        }
        private void set_175_PictureMarkerSymbol_AngleAlignment(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            that.AngleAlignment = (global::Esri.ArcGISRuntime.Symbology.MarkerAngleAlignment)Value;
        }
        private object get_176_PictureMarkerSymbol_Angle(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            return that.Angle;
        }
        private void set_176_PictureMarkerSymbol_Angle(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            that.Angle = (global::System.Double)Value;
        }
        private object get_177_PictureMarkerSymbol_Opacity(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            return that.Opacity;
        }
        private void set_177_PictureMarkerSymbol_Opacity(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            that.Opacity = (global::System.Double)Value;
        }
        private object get_178_PictureMarkerSymbol_XOffset(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            return that.XOffset;
        }
        private void set_178_PictureMarkerSymbol_XOffset(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            that.XOffset = (global::System.Double)Value;
        }
        private object get_179_PictureMarkerSymbol_YOffset(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            return that.YOffset;
        }
        private void set_179_PictureMarkerSymbol_YOffset(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            that.YOffset = (global::System.Double)Value;
        }
        private object get_180_SimpleFillSymbol_Outline(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol)instance;
            return that.Outline;
        }
        private void set_180_SimpleFillSymbol_Outline(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol)instance;
            that.Outline = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)Value;
        }
        private object get_181_SimpleFillSymbol_Color(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol)instance;
            return that.Color;
        }
        private void set_181_SimpleFillSymbol_Color(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_182_SimpleFillSymbol_Style(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol)instance;
            return that.Style;
        }
        private void set_182_SimpleFillSymbol_Style(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol)instance;
            that.Style = (global::Esri.ArcGISRuntime.Symbology.SimpleFillStyle)Value;
        }
        private object get_183_SimpleLineSymbol_Width(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)instance;
            return that.Width;
        }
        private void set_183_SimpleLineSymbol_Width(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_184_SimpleLineSymbol_Color(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)instance;
            return that.Color;
        }
        private void set_184_SimpleLineSymbol_Color(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_185_SimpleLineSymbol_Style(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)instance;
            return that.Style;
        }
        private void set_185_SimpleLineSymbol_Style(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)instance;
            that.Style = (global::Esri.ArcGISRuntime.Symbology.SimpleLineStyle)Value;
        }
        private object get_186_SimpleMarkerSymbol_Outline(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.Outline;
        }
        private void set_186_SimpleMarkerSymbol_Outline(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.Outline = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)Value;
        }
        private object get_187_SimpleMarkerSymbol_Size(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.Size;
        }
        private void set_187_SimpleMarkerSymbol_Size(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.Size = (global::System.Double)Value;
        }
        private object get_188_SimpleMarkerSymbol_Color(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.Color;
        }
        private void set_188_SimpleMarkerSymbol_Color(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_189_SimpleMarkerSymbol_Style(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.Style;
        }
        private void set_189_SimpleMarkerSymbol_Style(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.Style = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerStyle)Value;
        }
        private object get_190_SimpleMarkerSymbol_Angle(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.Angle;
        }
        private void set_190_SimpleMarkerSymbol_Angle(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.Angle = (global::System.Double)Value;
        }
        private object get_191_SimpleMarkerSymbol_XOffset(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.XOffset;
        }
        private void set_191_SimpleMarkerSymbol_XOffset(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.XOffset = (global::System.Double)Value;
        }
        private object get_192_SimpleMarkerSymbol_YOffset(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.YOffset;
        }
        private void set_192_SimpleMarkerSymbol_YOffset(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.YOffset = (global::System.Double)Value;
        }
        private object get_193_SimpleMarkerSymbol_AngleAlignment(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.AngleAlignment;
        }
        private void set_193_SimpleMarkerSymbol_AngleAlignment(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.AngleAlignment = (global::Esri.ArcGISRuntime.Symbology.MarkerAngleAlignment)Value;
        }
        private object get_194_TextSymbol_Text(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.Text;
        }
        private void set_194_TextSymbol_Text(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_195_TextSymbol_Color(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.Color;
        }
        private void set_195_TextSymbol_Color(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_196_TextSymbol_BackgroundColor(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.BackgroundColor;
        }
        private void set_196_TextSymbol_BackgroundColor(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.BackgroundColor = (global::Windows.UI.Color)Value;
        }
        private object get_197_TextSymbol_BorderLineColor(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.BorderLineColor;
        }
        private void set_197_TextSymbol_BorderLineColor(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.BorderLineColor = (global::Windows.UI.Color)Value;
        }
        private object get_198_TextSymbol_BorderLineSize(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.BorderLineSize;
        }
        private void set_198_TextSymbol_BorderLineSize(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.BorderLineSize = (global::System.Double)Value;
        }
        private object get_199_TextSymbol_VerticalTextAlignment(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.VerticalTextAlignment;
        }
        private void set_199_TextSymbol_VerticalTextAlignment(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.VerticalTextAlignment = (global::Esri.ArcGISRuntime.Symbology.VerticalTextAlignment)Value;
        }
        private object get_200_TextSymbol_HorizontalTextAlignment(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.HorizontalTextAlignment;
        }
        private void set_200_TextSymbol_HorizontalTextAlignment(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.HorizontalTextAlignment = (global::Esri.ArcGISRuntime.Symbology.HorizontalTextAlignment)Value;
        }
        private object get_201_TextSymbol_Angle(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.Angle;
        }
        private void set_201_TextSymbol_Angle(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.Angle = (global::System.Double)Value;
        }
        private object get_202_TextSymbol_XOffset(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.XOffset;
        }
        private void set_202_TextSymbol_XOffset(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.XOffset = (global::System.Double)Value;
        }
        private object get_203_TextSymbol_YOffset(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.YOffset;
        }
        private void set_203_TextSymbol_YOffset(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.YOffset = (global::System.Double)Value;
        }
        private object get_204_TextSymbol_AngleAlignment(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.AngleAlignment;
        }
        private void set_204_TextSymbol_AngleAlignment(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.AngleAlignment = (global::Esri.ArcGISRuntime.Symbology.MarkerAngleAlignment)Value;
        }
        private object get_205_TextSymbol_IsRightToLeft(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.IsRightToLeft;
        }
        private void set_205_TextSymbol_IsRightToLeft(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.IsRightToLeft = (global::System.Boolean)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember xamlMember = null;
            global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Esri.ArcGISRuntime.Controls.SceneView.Scene":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.SceneView");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Scene", "Esri.ArcGISRuntime.Controls.Scene");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_SceneView_Scene;
                xamlMember.Setter = set_0_SceneView_Scene;
                break;
            case "Esri.ArcGISRuntime.Controls.Scene.Layers":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.Scene");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Layers", "Esri.ArcGISRuntime.Layers.LayerCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_Scene_Layers;
                xamlMember.Setter = set_1_Scene_Layers;
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.FullExtent":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "FullExtent", "Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember.Getter = get_2_Layer_FullExtent;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.Status":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Status", "Esri.ArcGISRuntime.Layers.LayerStatus");
                xamlMember.Getter = get_3_Layer_Status;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.InitializationException":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "InitializationException", "System.Exception");
                xamlMember.Getter = get_4_Layer_InitializationException;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.DefaultSpatialReference":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "DefaultSpatialReference", "Esri.ArcGISRuntime.Geometry.SpatialReference");
                xamlMember.Getter = get_5_Layer_DefaultSpatialReference;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.Opacity":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Opacity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_Layer_Opacity;
                xamlMember.Setter = set_6_Layer_Opacity;
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.IsVisible":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "IsVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_Layer_IsVisible;
                xamlMember.Setter = set_7_Layer_IsVisible;
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.DisplayName":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "DisplayName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_Layer_DisplayName;
                xamlMember.Setter = set_8_Layer_DisplayName;
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.ShowLegend":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "ShowLegend", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_Layer_ShowLegend;
                xamlMember.Setter = set_9_Layer_ShowLegend;
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.MinScale":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "MinScale", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_Layer_MinScale;
                xamlMember.Setter = set_10_Layer_MinScale;
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.MaxScale":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "MaxScale", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_Layer_MaxScale;
                xamlMember.Setter = set_11_Layer_MaxScale;
                break;
            case "Esri.ArcGISRuntime.Layers.Layer.ID":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Layer");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "ID", "String");
                xamlMember.Getter = get_12_Layer_ID;
                xamlMember.Setter = set_12_Layer_ID;
                break;
            case "Esri.ArcGISRuntime.Controls.SceneView.Labeling":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.SceneView");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Labeling", "Esri.ArcGISRuntime.Controls.ViewLabelProperties");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_SceneView_Labeling;
                xamlMember.Setter = set_13_SceneView_Labeling;
                break;
            case "Esri.ArcGISRuntime.Controls.SceneView.IsShadowsEnabled":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.SceneView");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "IsShadowsEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_SceneView_IsShadowsEnabled;
                xamlMember.Setter = set_14_SceneView_IsShadowsEnabled;
                break;
            case "Esri.ArcGISRuntime.Controls.SceneView.LightPoint":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.SceneView");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "LightPoint", "Esri.ArcGISRuntime.Geometry.MapPoint");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_SceneView_LightPoint;
                xamlMember.Setter = set_15_SceneView_LightPoint;
                break;
            case "Esri.ArcGISRuntime.Controls.SceneView.AmbientLight":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.SceneView");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "AmbientLight", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_SceneView_AmbientLight;
                xamlMember.Setter = set_16_SceneView_AmbientLight;
                break;
            case "Esri.ArcGISRuntime.Controls.SceneView.SpatialReference":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.SceneView");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "SpatialReference", "Esri.ArcGISRuntime.Geometry.SpatialReference");
                xamlMember.Getter = get_17_SceneView_SpatialReference;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Controls.SceneView.Camera":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.SceneView");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Camera", "Esri.ArcGISRuntime.Controls.Camera");
                xamlMember.Getter = get_18_SceneView_Camera;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Controls.SceneView.IsWrapAroundActive":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.SceneView");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "IsWrapAroundActive", "Boolean");
                xamlMember.Getter = get_19_SceneView_IsWrapAroundActive;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Controls.SceneView.ElevationExaggeration":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.SceneView");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "ElevationExaggeration", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_SceneView_ElevationExaggeration;
                xamlMember.Setter = set_20_SceneView_ElevationExaggeration;
                break;
            case "Esri.ArcGISRuntime.Controls.ViewBase.GraphicsOverlays":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewBase");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "GraphicsOverlays", "Esri.ArcGISRuntime.Controls.GraphicsOverlayCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_ViewBase_GraphicsOverlays;
                xamlMember.Setter = set_21_ViewBase_GraphicsOverlays;
                break;
            case "Esri.ArcGISRuntime.Controls.GraphicsOverlay.Graphics":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.GraphicsOverlay");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Graphics", "Esri.ArcGISRuntime.Layers.GraphicCollection");
                xamlMember.Getter = get_22_GraphicsOverlay_Graphics;
                xamlMember.Setter = set_22_GraphicsOverlay_Graphics;
                break;
            case "Esri.ArcGISRuntime.Layers.Graphic.Attributes":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Graphic");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Attributes", "System.Collections.Generic.IDictionary`2<String, Object>");
                xamlMember.Getter = get_23_Graphic_Attributes;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.Graphic.Symbol":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Graphic");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Symbol", "Esri.ArcGISRuntime.Symbology.Symbol");
                xamlMember.Getter = get_24_Graphic_Symbol;
                xamlMember.Setter = set_24_Graphic_Symbol;
                break;
            case "Esri.ArcGISRuntime.Layers.Graphic.IsVisible":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Graphic");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "IsVisible", "Boolean");
                xamlMember.Getter = get_25_Graphic_IsVisible;
                xamlMember.Setter = set_25_Graphic_IsVisible;
                break;
            case "Esri.ArcGISRuntime.Layers.Graphic.IsSelected":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Graphic");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.Getter = get_26_Graphic_IsSelected;
                xamlMember.Setter = set_26_Graphic_IsSelected;
                break;
            case "Esri.ArcGISRuntime.Layers.Graphic.ZIndex":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.Graphic");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "ZIndex", "Int32");
                xamlMember.Getter = get_27_Graphic_ZIndex;
                xamlMember.Setter = set_27_Graphic_ZIndex;
                break;
            case "Esri.ArcGISRuntime.Data.Feature.Geometry":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Data.Feature");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Geometry", "Esri.ArcGISRuntime.Geometry.Geometry");
                xamlMember.Getter = get_28_Feature_Geometry;
                xamlMember.Setter = set_28_Feature_Geometry;
                break;
            case "Esri.ArcGISRuntime.Controls.GraphicsOverlay.RenderingMode":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.GraphicsOverlay");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "RenderingMode", "Esri.ArcGISRuntime.Layers.GraphicsRenderingMode");
                xamlMember.Getter = get_29_GraphicsOverlay_RenderingMode;
                xamlMember.Setter = set_29_GraphicsOverlay_RenderingMode;
                break;
            case "Esri.ArcGISRuntime.Controls.GraphicsOverlay.SelectionColor":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.GraphicsOverlay");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "SelectionColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_GraphicsOverlay_SelectionColor;
                xamlMember.Setter = set_30_GraphicsOverlay_SelectionColor;
                break;
            case "Esri.ArcGISRuntime.Controls.GraphicsOverlay.Renderer":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.GraphicsOverlay");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Renderer", "Esri.ArcGISRuntime.Symbology.Renderer");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_GraphicsOverlay_Renderer;
                xamlMember.Setter = set_31_GraphicsOverlay_Renderer;
                break;
            case "Esri.ArcGISRuntime.Controls.GraphicsOverlay.IsVisible":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.GraphicsOverlay");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "IsVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_GraphicsOverlay_IsVisible;
                xamlMember.Setter = set_32_GraphicsOverlay_IsVisible;
                break;
            case "Esri.ArcGISRuntime.Controls.GraphicsOverlay.Opacity":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.GraphicsOverlay");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Opacity", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_GraphicsOverlay_Opacity;
                xamlMember.Setter = set_33_GraphicsOverlay_Opacity;
                break;
            case "Esri.ArcGISRuntime.Controls.GraphicsOverlay.MinScale":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.GraphicsOverlay");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "MinScale", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_GraphicsOverlay_MinScale;
                xamlMember.Setter = set_34_GraphicsOverlay_MinScale;
                break;
            case "Esri.ArcGISRuntime.Controls.GraphicsOverlay.MaxScale":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.GraphicsOverlay");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "MaxScale", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_GraphicsOverlay_MaxScale;
                xamlMember.Setter = set_35_GraphicsOverlay_MaxScale;
                break;
            case "Esri.ArcGISRuntime.Controls.GraphicsOverlay.ID":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.GraphicsOverlay");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "ID", "String");
                xamlMember.Getter = get_36_GraphicsOverlay_ID;
                xamlMember.Setter = set_36_GraphicsOverlay_ID;
                break;
            case "Esri.ArcGISRuntime.Controls.GraphicsOverlay.SceneProperties":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.GraphicsOverlay");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "SceneProperties", "Esri.ArcGISRuntime.Layers.LayerSceneProperties");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_GraphicsOverlay_SceneProperties;
                xamlMember.Setter = set_37_GraphicsOverlay_SceneProperties;
                break;
            case "Esri.ArcGISRuntime.Controls.GraphicsOverlay.GraphicsSource":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.GraphicsOverlay");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "GraphicsSource", "System.Collections.Generic.IEnumerable`1<Esri.ArcGISRuntime.Layers.Graphic>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_GraphicsOverlay_GraphicsSource;
                xamlMember.Setter = set_38_GraphicsOverlay_GraphicsSource;
                break;
            case "Esri.ArcGISRuntime.Controls.GraphicsOverlay.Labeling":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.GraphicsOverlay");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Labeling", "Esri.ArcGISRuntime.Layers.LabelProperties");
                xamlMember.Getter = get_39_GraphicsOverlay_Labeling;
                xamlMember.Setter = set_39_GraphicsOverlay_Labeling;
                break;
            case "Esri.ArcGISRuntime.Layers.LabelProperties.LabelClasses":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.LabelProperties");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "LabelClasses", "Esri.ArcGISRuntime.Layers.AttributeLabelClassCollection");
                xamlMember.Getter = get_40_LabelProperties_LabelClasses;
                xamlMember.Setter = set_40_LabelProperties_LabelClasses;
                break;
            case "Esri.ArcGISRuntime.Layers.AttributeLabelClass.Symbol":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.AttributeLabelClass");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Symbol", "Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember.Getter = get_41_AttributeLabelClass_Symbol;
                xamlMember.Setter = set_41_AttributeLabelClass_Symbol;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.Font":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Font", "Esri.ArcGISRuntime.Symbology.SymbolFont");
                xamlMember.Getter = get_42_TextSymbol_Font;
                xamlMember.Setter = set_42_TextSymbol_Font;
                break;
            case "Esri.ArcGISRuntime.Layers.AttributeLabelClass.TextExpression":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.AttributeLabelClass");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "TextExpression", "String");
                xamlMember.Getter = get_43_AttributeLabelClass_TextExpression;
                xamlMember.Setter = set_43_AttributeLabelClass_TextExpression;
                break;
            case "Esri.ArcGISRuntime.Layers.AttributeLabelClass.DuplicateLabels":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.AttributeLabelClass");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "DuplicateLabels", "Esri.ArcGISRuntime.Layers.DuplicateLabels");
                xamlMember.Getter = get_44_AttributeLabelClass_DuplicateLabels;
                xamlMember.Setter = set_44_AttributeLabelClass_DuplicateLabels;
                break;
            case "Esri.ArcGISRuntime.Layers.AttributeLabelClass.IsVisible":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.AttributeLabelClass");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "IsVisible", "Boolean");
                xamlMember.Getter = get_45_AttributeLabelClass_IsVisible;
                xamlMember.Setter = set_45_AttributeLabelClass_IsVisible;
                break;
            case "Esri.ArcGISRuntime.Layers.AttributeLabelClass.IsWordWrapEnabled":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.AttributeLabelClass");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "IsWordWrapEnabled", "Boolean");
                xamlMember.Getter = get_46_AttributeLabelClass_IsWordWrapEnabled;
                xamlMember.Setter = set_46_AttributeLabelClass_IsWordWrapEnabled;
                break;
            case "Esri.ArcGISRuntime.Layers.AttributeLabelClass.MaxScale":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.AttributeLabelClass");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "MaxScale", "Double");
                xamlMember.Getter = get_47_AttributeLabelClass_MaxScale;
                xamlMember.Setter = set_47_AttributeLabelClass_MaxScale;
                break;
            case "Esri.ArcGISRuntime.Layers.AttributeLabelClass.MinScale":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.AttributeLabelClass");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "MinScale", "Double");
                xamlMember.Getter = get_48_AttributeLabelClass_MinScale;
                xamlMember.Setter = set_48_AttributeLabelClass_MinScale;
                break;
            case "Esri.ArcGISRuntime.Layers.AttributeLabelClass.LabelPlacement":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.AttributeLabelClass");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "LabelPlacement", "Esri.ArcGISRuntime.Layers.LabelPlacement");
                xamlMember.Getter = get_49_AttributeLabelClass_LabelPlacement;
                xamlMember.Setter = set_49_AttributeLabelClass_LabelPlacement;
                break;
            case "Esri.ArcGISRuntime.Layers.AttributeLabelClass.LabelPosition":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.AttributeLabelClass");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "LabelPosition", "Esri.ArcGISRuntime.Layers.LabelPosition");
                xamlMember.Getter = get_50_AttributeLabelClass_LabelPosition;
                xamlMember.Setter = set_50_AttributeLabelClass_LabelPosition;
                break;
            case "Esri.ArcGISRuntime.Layers.AttributeLabelClass.LabelPriority":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.AttributeLabelClass");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "LabelPriority", "Esri.ArcGISRuntime.Layers.LabelPriority");
                xamlMember.Getter = get_51_AttributeLabelClass_LabelPriority;
                xamlMember.Setter = set_51_AttributeLabelClass_LabelPriority;
                break;
            case "Esri.ArcGISRuntime.Layers.AttributeLabelClass.WhereClause":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.AttributeLabelClass");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "WhereClause", "String");
                xamlMember.Getter = get_52_AttributeLabelClass_WhereClause;
                xamlMember.Setter = set_52_AttributeLabelClass_WhereClause;
                break;
            case "Esri.ArcGISRuntime.Layers.AttributeLabelClass.WordWrapLength":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.AttributeLabelClass");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "WordWrapLength", "Int32");
                xamlMember.Getter = get_53_AttributeLabelClass_WordWrapLength;
                xamlMember.Setter = set_53_AttributeLabelClass_WordWrapLength;
                break;
            case "Esri.ArcGISRuntime.Controls.GraphicsOverlay.SelectedGraphics":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.GraphicsOverlay");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "SelectedGraphics", "System.Collections.Generic.IEnumerable`1<Esri.ArcGISRuntime.Layers.Graphic>");
                xamlMember.Getter = get_54_GraphicsOverlay_SelectedGraphics;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Controls.ViewBase.LocationDisplay":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewBase");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "LocationDisplay", "Esri.ArcGISRuntime.Location.LocationDisplay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_ViewBase_LocationDisplay;
                xamlMember.Setter = set_55_ViewBase_LocationDisplay;
                break;
            case "Esri.ArcGISRuntime.Controls.ViewBase.TimeExtent":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewBase");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "TimeExtent", "Esri.ArcGISRuntime.Data.TimeExtent");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_ViewBase_TimeExtent;
                xamlMember.Setter = set_56_ViewBase_TimeExtent;
                break;
            case "Esri.ArcGISRuntime.Controls.ViewBase.IsNavigating":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewBase");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "IsNavigating", "Boolean");
                xamlMember.Getter = get_57_ViewBase_IsNavigating;
                xamlMember.Setter = set_57_ViewBase_IsNavigating;
                break;
            case "Esri.ArcGISRuntime.Controls.ViewBase.Overlays":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewBase");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Overlays", "Esri.ArcGISRuntime.Controls.OverlayItemsControl");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_ViewBase_Overlays;
                xamlMember.Setter = set_58_ViewBase_Overlays;
                break;
            case "Esri.ArcGISRuntime.Controls.OverlayItemsControl.Items":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.OverlayItemsControl");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Items", "Esri.ArcGISRuntime.Controls.OverlayItemsCollection");
                xamlMember.Getter = get_59_OverlayItemsControl_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Controls.ViewBase.IsLogoVisible":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewBase");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "IsLogoVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_ViewBase_IsLogoVisible;
                xamlMember.Setter = set_60_ViewBase_IsLogoVisible;
                break;
            case "Esri.ArcGISRuntime.Controls.ViewBase.ViewOverlayAnchor":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewBase");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "ViewOverlayAnchor", "Esri.ArcGISRuntime.Geometry.MapPoint");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_61_ViewBase_ViewOverlayAnchor;
                xamlMember.Setter = set_61_ViewBase_ViewOverlayAnchor;
                break;
            case "Esri.ArcGISRuntime.Controls.Scene.Surface":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.Scene");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Surface", "Esri.ArcGISRuntime.Controls.ElevationSourceCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_Scene_Surface;
                xamlMember.Setter = set_62_Scene_Surface;
                break;
            case "Esri.ArcGISRuntime.Controls.ElevationSource.ID":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ElevationSource");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "ID", "String");
                xamlMember.Getter = get_63_ElevationSource_ID;
                xamlMember.Setter = set_63_ElevationSource_ID;
                break;
            case "Esri.ArcGISRuntime.Controls.ElevationSource.IsEnabled":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ElevationSource");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "IsEnabled", "Boolean");
                xamlMember.Getter = get_64_ElevationSource_IsEnabled;
                xamlMember.Setter = set_64_ElevationSource_IsEnabled;
                break;
            case "System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Controls.ElevationSource>.Count":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Esri.ArcGISRuntime.Controls.ElevationSource>");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Count", "Int32");
                xamlMember.Getter = get_65_Collection_Count;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Controls.ServiceElevationSource.ServiceUri":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ServiceElevationSource");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "ServiceUri", "String");
                xamlMember.Getter = get_66_ServiceElevationSource_ServiceUri;
                xamlMember.Setter = set_66_ServiceElevationSource_ServiceUri;
                break;
            case "Esri.ArcGISRuntime.Controls.ServiceElevationSource.Token":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ServiceElevationSource");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Token", "String");
                xamlMember.Getter = get_67_ServiceElevationSource_Token;
                xamlMember.Setter = set_67_ServiceElevationSource_Token;
                break;
            case "Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer.ServiceUri":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "ServiceUri", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_68_ArcGISTiledMapServiceLayer_ServiceUri;
                xamlMember.Setter = set_68_ArcGISTiledMapServiceLayer_ServiceUri;
                break;
            case "Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer.Token":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Token", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_69_ArcGISTiledMapServiceLayer_Token;
                xamlMember.Setter = set_69_ArcGISTiledMapServiceLayer_Token;
                break;
            case "Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer.ServiceInfo":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.ArcGISTiledMapServiceLayer");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "ServiceInfo", "Esri.ArcGISRuntime.ArcGISServices.MapServiceInfo");
                xamlMember.Getter = get_70_ArcGISTiledMapServiceLayer_ServiceInfo;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.TiledLayer.TileInfo":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.TiledLayer");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "TileInfo", "Esri.ArcGISRuntime.Layers.TiledLayerInitializationInfo");
                xamlMember.Getter = get_71_TiledLayer_TileInfo;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.TiledLayer.Brightness":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.TiledLayer");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Brightness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_72_TiledLayer_Brightness;
                xamlMember.Setter = set_72_TiledLayer_Brightness;
                break;
            case "Esri.ArcGISRuntime.Layers.TiledLayer.Contrast":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.TiledLayer");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Contrast", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_73_TiledLayer_Contrast;
                xamlMember.Setter = set_73_TiledLayer_Contrast;
                break;
            case "Esri.ArcGISRuntime.Layers.TiledLayer.Gamma":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.TiledLayer");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Gamma", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_74_TiledLayer_Gamma;
                xamlMember.Setter = set_74_TiledLayer_Gamma;
                break;
            case "Esri.ArcGISRuntime.Layers.TiledLayer.ResamplingMode":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.TiledLayer");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "ResamplingMode", "Esri.ArcGISRuntime.Layers.TiledLayerResamplingMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_75_TiledLayer_ResamplingMode;
                xamlMember.Setter = set_75_TiledLayer_ResamplingMode;
                break;
            case "Esri.ArcGISRuntime.Controls.Map.Layers":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.Map");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Layers", "Esri.ArcGISRuntime.Layers.LayerCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_76_Map_Layers;
                xamlMember.Setter = set_76_Map_Layers;
                break;
            case "Esri.ArcGISRuntime.Controls.Map.InitialViewpoint":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.Map");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "InitialViewpoint", "Esri.ArcGISRuntime.Controls.Viewpoint");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_77_Map_InitialViewpoint;
                xamlMember.Setter = set_77_Map_InitialViewpoint;
                break;
            case "Esri.ArcGISRuntime.Controls.Map.SpatialReference":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.Map");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "SpatialReference", "Esri.ArcGISRuntime.Geometry.SpatialReference");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_78_Map_SpatialReference;
                xamlMember.Setter = set_78_Map_SpatialReference;
                break;
            case "Esri.ArcGISRuntime.Controls.ViewpointCenter.Scale":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewpointCenter");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Scale", "Double");
                xamlMember.Getter = get_79_ViewpointCenter_Scale;
                xamlMember.Setter = set_79_ViewpointCenter_Scale;
                break;
            case "Esri.ArcGISRuntime.Controls.ViewpointCenter.X":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewpointCenter");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "X", "Double");
                xamlMember.Getter = get_80_ViewpointCenter_X;
                xamlMember.Setter = set_80_ViewpointCenter_X;
                break;
            case "Esri.ArcGISRuntime.Controls.ViewpointCenter.Y":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewpointCenter");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Y", "Double");
                xamlMember.Getter = get_81_ViewpointCenter_Y;
                xamlMember.Setter = set_81_ViewpointCenter_Y;
                break;
            case "Esri.ArcGISRuntime.Controls.ViewpointCenter.SpatialReferenceID":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewpointCenter");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "SpatialReferenceID", "Int32");
                xamlMember.Getter = get_82_ViewpointCenter_SpatialReferenceID;
                xamlMember.Setter = set_82_ViewpointCenter_SpatialReferenceID;
                break;
            case "Esri.ArcGISRuntime.Controls.Viewpoint.Camera":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.Viewpoint");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Camera", "Esri.ArcGISRuntime.Controls.Camera");
                xamlMember.Getter = get_83_Viewpoint_Camera;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Controls.Viewpoint.TargetScale":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.Viewpoint");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "TargetScale", "System.Nullable`1<Double>");
                xamlMember.Getter = get_84_Viewpoint_TargetScale;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Controls.Viewpoint.TargetGeometry":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.Viewpoint");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "TargetGeometry", "Esri.ArcGISRuntime.Geometry.Geometry");
                xamlMember.Getter = get_85_Viewpoint_TargetGeometry;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Controls.Viewpoint.Rotation":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.Viewpoint");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Rotation", "Double");
                xamlMember.Getter = get_86_Viewpoint_Rotation;
                xamlMember.Setter = set_86_Viewpoint_Rotation;
                break;
            case "Esri.ArcGISRuntime.Controls.ViewpointExtent.XMin":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewpointExtent");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "XMin", "Double");
                xamlMember.Getter = get_87_ViewpointExtent_XMin;
                xamlMember.Setter = set_87_ViewpointExtent_XMin;
                break;
            case "Esri.ArcGISRuntime.Controls.ViewpointExtent.YMin":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewpointExtent");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "YMin", "Double");
                xamlMember.Getter = get_88_ViewpointExtent_YMin;
                xamlMember.Setter = set_88_ViewpointExtent_YMin;
                break;
            case "Esri.ArcGISRuntime.Controls.ViewpointExtent.XMax":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewpointExtent");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "XMax", "Double");
                xamlMember.Getter = get_89_ViewpointExtent_XMax;
                xamlMember.Setter = set_89_ViewpointExtent_XMax;
                break;
            case "Esri.ArcGISRuntime.Controls.ViewpointExtent.YMax":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewpointExtent");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "YMax", "Double");
                xamlMember.Getter = get_90_ViewpointExtent_YMax;
                xamlMember.Setter = set_90_ViewpointExtent_YMax;
                break;
            case "Esri.ArcGISRuntime.Controls.ViewpointExtent.SpatialReferenceID":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Controls.ViewpointExtent");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "SpatialReferenceID", "Int32");
                xamlMember.Getter = get_91_ViewpointExtent_SpatialReferenceID;
                xamlMember.Setter = set_91_ViewpointExtent_SpatialReferenceID;
                break;
            case "Esri.ArcGISRuntime.Layers.KmlContainer.IsOpen":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlContainer");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.Getter = get_92_KmlContainer_IsOpen;
                xamlMember.Setter = set_92_KmlContainer_IsOpen;
                break;
            case "Esri.ArcGISRuntime.Layers.KmlContainer.IsPartiallyVisible":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlContainer");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "IsPartiallyVisible", "Boolean");
                xamlMember.Getter = get_93_KmlContainer_IsPartiallyVisible;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.KmlContainer.ListType":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlContainer");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "ListType", "Esri.ArcGISRuntime.Layers.KmlListType");
                xamlMember.Getter = get_94_KmlContainer_ListType;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.KmlFeature.Name":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlFeature");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_95_KmlFeature_Name;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.KmlFeature.IsVisible":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlFeature");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "IsVisible", "Boolean");
                xamlMember.Getter = get_96_KmlFeature_IsVisible;
                xamlMember.Setter = set_96_KmlFeature_IsVisible;
                break;
            case "Esri.ArcGISRuntime.Layers.KmlFeature.IsHighlighted":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlFeature");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "IsHighlighted", "Boolean");
                xamlMember.Getter = get_97_KmlFeature_IsHighlighted;
                xamlMember.Setter = set_97_KmlFeature_IsHighlighted;
                break;
            case "Esri.ArcGISRuntime.Layers.KmlFeature.ChildFeatures":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlFeature");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "ChildFeatures", "Esri.ArcGISRuntime.Layers.KmlFeatureCollection");
                xamlMember.Getter = get_98_KmlFeature_ChildFeatures;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.KmlFeature.KmlFeatureIcon":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlFeature");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "KmlFeatureIcon", "Esri.ArcGISRuntime.Layers.KmlFeatureIcon");
                xamlMember.Getter = get_99_KmlFeature_KmlFeatureIcon;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.KmlFeature.BalloonStyle":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlFeature");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "BalloonStyle", "Esri.ArcGISRuntime.Layers.KmlBalloonStyle");
                xamlMember.Getter = get_100_KmlFeature_BalloonStyle;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.KmlFeature.Viewpoint":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlFeature");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Viewpoint", "Esri.ArcGISRuntime.Controls.Viewpoint");
                xamlMember.Getter = get_101_KmlFeature_Viewpoint;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.KmlFeatureCollection.Count":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlFeatureCollection");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Count", "Int32");
                xamlMember.Getter = get_102_KmlFeatureCollection_Count;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.KmlNetworkLink.IsUpdating":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlNetworkLink");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "IsUpdating", "Boolean");
                xamlMember.Getter = get_103_KmlNetworkLink_IsUpdating;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.KmlNetworkLink.IsOpen":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlNetworkLink");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.Getter = get_104_KmlNetworkLink_IsOpen;
                xamlMember.Setter = set_104_KmlNetworkLink_IsOpen;
                break;
            case "Esri.ArcGISRuntime.Layers.KmlNetworkLink.IsPartiallyVisible":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlNetworkLink");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "IsPartiallyVisible", "Boolean");
                xamlMember.Getter = get_105_KmlNetworkLink_IsPartiallyVisible;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.KmlNetworkLink.ListType":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlNetworkLink");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "ListType", "Esri.ArcGISRuntime.Layers.KmlListType");
                xamlMember.Getter = get_106_KmlNetworkLink_ListType;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.KmlPlacemark.GraphicType":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlPlacemark");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "GraphicType", "Esri.ArcGISRuntime.Layers.KmlGraphicType");
                xamlMember.Getter = get_107_KmlPlacemark_GraphicType;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.KmlPlacemark.Extent":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlPlacemark");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Extent", "Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember.Getter = get_108_KmlPlacemark_Extent;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.KmlGroundOverlay.Extent":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.KmlGroundOverlay");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Extent", "Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember.Getter = get_109_KmlGroundOverlay_Extent;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Layers.LabelProperties.IsEnabled":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Layers.LabelProperties");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "IsEnabled", "Boolean");
                xamlMember.Getter = get_110_LabelProperties_IsEnabled;
                xamlMember.Setter = set_110_LabelProperties_IsEnabled;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol.RadiusTop":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "RadiusTop", "Double");
                xamlMember.Getter = get_111_ConeMarkerSymbol_RadiusTop;
                xamlMember.Setter = set_111_ConeMarkerSymbol_RadiusTop;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol.RadiusBottom":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "RadiusBottom", "Double");
                xamlMember.Getter = get_112_ConeMarkerSymbol_RadiusBottom;
                xamlMember.Setter = set_112_ConeMarkerSymbol_RadiusBottom;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol.Height":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Height", "Double");
                xamlMember.Getter = get_113_ConeMarkerSymbol_Height;
                xamlMember.Setter = set_113_ConeMarkerSymbol_Height;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol.SegmentCount":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "SegmentCount", "Int32");
                xamlMember.Getter = get_114_ConeMarkerSymbol_SegmentCount;
                xamlMember.Setter = set_114_ConeMarkerSymbol_SegmentCount;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol.Color":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.Getter = get_115_ConeMarkerSymbol_Color;
                xamlMember.Setter = set_115_ConeMarkerSymbol_Color;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol.Heading":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Heading", "Double");
                xamlMember.Getter = get_116_ConeMarkerSymbol_Heading;
                xamlMember.Setter = set_116_ConeMarkerSymbol_Heading;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol.Pitch":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Pitch", "Double");
                xamlMember.Getter = get_117_ConeMarkerSymbol_Pitch;
                xamlMember.Setter = set_117_ConeMarkerSymbol_Pitch;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol.Roll":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Roll", "Double");
                xamlMember.Getter = get_118_ConeMarkerSymbol_Roll;
                xamlMember.Setter = set_118_ConeMarkerSymbol_Roll;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol.AnchorPosition":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.ConeMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "AnchorPosition", "Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbolAnchorPosition");
                xamlMember.Getter = get_119_ConeMarkerSymbol_AnchorPosition;
                xamlMember.Setter = set_119_ConeMarkerSymbol_AnchorPosition;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeSymbol.Infos":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Infos", "Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfoCollection");
                xamlMember.Getter = get_120_DistanceCompositeSymbol_Infos;
                xamlMember.Setter = set_120_DistanceCompositeSymbol_Infos;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo.Symbol":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Symbol", "Esri.ArcGISRuntime.Symbology.Symbol");
                xamlMember.Getter = get_121_DistanceCompositeInfo_Symbol;
                xamlMember.Setter = set_121_DistanceCompositeInfo_Symbol;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo.Minimum":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Minimum", "Double");
                xamlMember.Getter = get_122_DistanceCompositeInfo_Minimum;
                xamlMember.Setter = set_122_DistanceCompositeInfo_Minimum;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo.Maximum":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.DistanceCompositeInfo");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Maximum", "Double");
                xamlMember.Getter = get_123_DistanceCompositeInfo_Maximum;
                xamlMember.Setter = set_123_DistanceCompositeInfo_Maximum;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol.Width":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_124_DiamondMarkerSymbol_Width;
                xamlMember.Setter = set_124_DiamondMarkerSymbol_Width;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol.Height":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Height", "Double");
                xamlMember.Getter = get_125_DiamondMarkerSymbol_Height;
                xamlMember.Setter = set_125_DiamondMarkerSymbol_Height;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol.Color":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.Getter = get_126_DiamondMarkerSymbol_Color;
                xamlMember.Setter = set_126_DiamondMarkerSymbol_Color;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol.Heading":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Heading", "Double");
                xamlMember.Getter = get_127_DiamondMarkerSymbol_Heading;
                xamlMember.Setter = set_127_DiamondMarkerSymbol_Heading;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol.Pitch":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Pitch", "Double");
                xamlMember.Getter = get_128_DiamondMarkerSymbol_Pitch;
                xamlMember.Setter = set_128_DiamondMarkerSymbol_Pitch;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol.Roll":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Roll", "Double");
                xamlMember.Getter = get_129_DiamondMarkerSymbol_Roll;
                xamlMember.Setter = set_129_DiamondMarkerSymbol_Roll;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol.AnchorPosition":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.DiamondMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "AnchorPosition", "Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbolAnchorPosition");
                xamlMember.Getter = get_130_DiamondMarkerSymbol_AnchorPosition;
                xamlMember.Setter = set_130_DiamondMarkerSymbol_AnchorPosition;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol.Scale":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Scale", "Double");
                xamlMember.Getter = get_131_ModelMarkerSymbol_Scale;
                xamlMember.Setter = set_131_ModelMarkerSymbol_Scale;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol.SourceUri":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "SourceUri", "String");
                xamlMember.Getter = get_132_ModelMarkerSymbol_SourceUri;
                xamlMember.Setter = set_132_ModelMarkerSymbol_SourceUri;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol.Heading":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Heading", "Double");
                xamlMember.Getter = get_133_ModelMarkerSymbol_Heading;
                xamlMember.Setter = set_133_ModelMarkerSymbol_Heading;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol.Pitch":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Pitch", "Double");
                xamlMember.Getter = get_134_ModelMarkerSymbol_Pitch;
                xamlMember.Setter = set_134_ModelMarkerSymbol_Pitch;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol.Roll":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Roll", "Double");
                xamlMember.Getter = get_135_ModelMarkerSymbol_Roll;
                xamlMember.Setter = set_135_ModelMarkerSymbol_Roll;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol.AnchorPosition":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "AnchorPosition", "Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbolAnchorPosition");
                xamlMember.Getter = get_136_ModelMarkerSymbol_AnchorPosition;
                xamlMember.Setter = set_136_ModelMarkerSymbol_AnchorPosition;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol.Color":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.ModelMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.Getter = get_137_ModelMarkerSymbol_Color;
                xamlMember.Setter = set_137_ModelMarkerSymbol_Color;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol.Width":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_138_BoxMarkerSymbol_Width;
                xamlMember.Setter = set_138_BoxMarkerSymbol_Width;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol.Height":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Height", "Double");
                xamlMember.Getter = get_139_BoxMarkerSymbol_Height;
                xamlMember.Setter = set_139_BoxMarkerSymbol_Height;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol.Depth":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Depth", "Double");
                xamlMember.Getter = get_140_BoxMarkerSymbol_Depth;
                xamlMember.Setter = set_140_BoxMarkerSymbol_Depth;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol.Color":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.Getter = get_141_BoxMarkerSymbol_Color;
                xamlMember.Setter = set_141_BoxMarkerSymbol_Color;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol.Heading":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Heading", "Double");
                xamlMember.Getter = get_142_BoxMarkerSymbol_Heading;
                xamlMember.Setter = set_142_BoxMarkerSymbol_Heading;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol.Pitch":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Pitch", "Double");
                xamlMember.Getter = get_143_BoxMarkerSymbol_Pitch;
                xamlMember.Setter = set_143_BoxMarkerSymbol_Pitch;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol.Roll":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Roll", "Double");
                xamlMember.Getter = get_144_BoxMarkerSymbol_Roll;
                xamlMember.Setter = set_144_BoxMarkerSymbol_Roll;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol.AnchorPosition":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.BoxMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "AnchorPosition", "Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbolAnchorPosition");
                xamlMember.Getter = get_145_BoxMarkerSymbol_AnchorPosition;
                xamlMember.Setter = set_145_BoxMarkerSymbol_AnchorPosition;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol.Radius":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Radius", "Double");
                xamlMember.Getter = get_146_SphereMarkerSymbol_Radius;
                xamlMember.Setter = set_146_SphereMarkerSymbol_Radius;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol.Color":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.Getter = get_147_SphereMarkerSymbol_Color;
                xamlMember.Setter = set_147_SphereMarkerSymbol_Color;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol.SegmentCount":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "SegmentCount", "Int32");
                xamlMember.Getter = get_148_SphereMarkerSymbol_SegmentCount;
                xamlMember.Setter = set_148_SphereMarkerSymbol_SegmentCount;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol.AnchorPosition":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "AnchorPosition", "Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbolAnchorPosition");
                xamlMember.Getter = get_149_SphereMarkerSymbol_AnchorPosition;
                xamlMember.Setter = set_149_SphereMarkerSymbol_AnchorPosition;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol.Heading":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Heading", "Double");
                xamlMember.Getter = get_150_SphereMarkerSymbol_Heading;
                xamlMember.Setter = set_150_SphereMarkerSymbol_Heading;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol.Pitch":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Pitch", "Double");
                xamlMember.Getter = get_151_SphereMarkerSymbol_Pitch;
                xamlMember.Setter = set_151_SphereMarkerSymbol_Pitch;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol.Roll":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.SphereMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Roll", "Double");
                xamlMember.Getter = get_152_SphereMarkerSymbol_Roll;
                xamlMember.Setter = set_152_SphereMarkerSymbol_Roll;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol.Width":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_153_TetrahedronMarkerSymbol_Width;
                xamlMember.Setter = set_153_TetrahedronMarkerSymbol_Width;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol.Height":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Height", "Double");
                xamlMember.Getter = get_154_TetrahedronMarkerSymbol_Height;
                xamlMember.Setter = set_154_TetrahedronMarkerSymbol_Height;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol.Color":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.Getter = get_155_TetrahedronMarkerSymbol_Color;
                xamlMember.Setter = set_155_TetrahedronMarkerSymbol_Color;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol.Heading":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Heading", "Double");
                xamlMember.Getter = get_156_TetrahedronMarkerSymbol_Heading;
                xamlMember.Setter = set_156_TetrahedronMarkerSymbol_Heading;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol.Pitch":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Pitch", "Double");
                xamlMember.Getter = get_157_TetrahedronMarkerSymbol_Pitch;
                xamlMember.Setter = set_157_TetrahedronMarkerSymbol_Pitch;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol.Roll":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Roll", "Double");
                xamlMember.Getter = get_158_TetrahedronMarkerSymbol_Roll;
                xamlMember.Setter = set_158_TetrahedronMarkerSymbol_Roll;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol.AnchorPosition":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.TetrahedronMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "AnchorPosition", "Esri.ArcGISRuntime.Symbology.SceneSymbology.SceneSymbolAnchorPosition");
                xamlMember.Getter = get_159_TetrahedronMarkerSymbol_AnchorPosition;
                xamlMember.Setter = set_159_TetrahedronMarkerSymbol_AnchorPosition;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.TubeLineSymbol.Width":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.TubeLineSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_160_TubeLineSymbol_Width;
                xamlMember.Setter = set_160_TubeLineSymbol_Width;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.TubeLineSymbol.Color":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.TubeLineSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.Getter = get_161_TubeLineSymbol_Color;
                xamlMember.Setter = set_161_TubeLineSymbol_Color;
                break;
            case "Esri.ArcGISRuntime.Symbology.SceneSymbology.TubeLineSymbol.SegmentCount":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SceneSymbology.TubeLineSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "SegmentCount", "Int32");
                xamlMember.Getter = get_162_TubeLineSymbol_SegmentCount;
                xamlMember.Setter = set_162_TubeLineSymbol_SegmentCount;
                break;
            case "Esri.ArcGISRuntime.Symbology.CompositeSymbol.Symbols":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.CompositeSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Symbols", "Esri.ArcGISRuntime.Symbology.SymbolCollection");
                xamlMember.Getter = get_163_CompositeSymbol_Symbols;
                xamlMember.Setter = set_163_CompositeSymbol_Symbols;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.Outline":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Outline", "Esri.ArcGISRuntime.Symbology.SimpleLineSymbol");
                xamlMember.Getter = get_164_PictureFillSymbol_Outline;
                xamlMember.Setter = set_164_PictureFillSymbol_Outline;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.Opacity":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Opacity", "Double");
                xamlMember.Getter = get_165_PictureFillSymbol_Opacity;
                xamlMember.Setter = set_165_PictureFillSymbol_Opacity;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.Width":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_166_PictureFillSymbol_Width;
                xamlMember.Setter = set_166_PictureFillSymbol_Width;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.Height":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Height", "Double");
                xamlMember.Getter = get_167_PictureFillSymbol_Height;
                xamlMember.Setter = set_167_PictureFillSymbol_Height;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.Angle":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Angle", "Double");
                xamlMember.Getter = get_168_PictureFillSymbol_Angle;
                xamlMember.Setter = set_168_PictureFillSymbol_Angle;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.XOffset":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "XOffset", "Double");
                xamlMember.Getter = get_169_PictureFillSymbol_XOffset;
                xamlMember.Setter = set_169_PictureFillSymbol_XOffset;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.YOffset":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "YOffset", "Double");
                xamlMember.Getter = get_170_PictureFillSymbol_YOffset;
                xamlMember.Setter = set_170_PictureFillSymbol_YOffset;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.XScale":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "XScale", "Double");
                xamlMember.Getter = get_171_PictureFillSymbol_XScale;
                xamlMember.Setter = set_171_PictureFillSymbol_XScale;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.YScale":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "YScale", "Double");
                xamlMember.Getter = get_172_PictureFillSymbol_YScale;
                xamlMember.Setter = set_172_PictureFillSymbol_YScale;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.Width":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_173_PictureMarkerSymbol_Width;
                xamlMember.Setter = set_173_PictureMarkerSymbol_Width;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.Height":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Height", "Double");
                xamlMember.Getter = get_174_PictureMarkerSymbol_Height;
                xamlMember.Setter = set_174_PictureMarkerSymbol_Height;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.AngleAlignment":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "AngleAlignment", "Esri.ArcGISRuntime.Symbology.MarkerAngleAlignment");
                xamlMember.Getter = get_175_PictureMarkerSymbol_AngleAlignment;
                xamlMember.Setter = set_175_PictureMarkerSymbol_AngleAlignment;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.Angle":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Angle", "Double");
                xamlMember.Getter = get_176_PictureMarkerSymbol_Angle;
                xamlMember.Setter = set_176_PictureMarkerSymbol_Angle;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.Opacity":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Opacity", "Double");
                xamlMember.Getter = get_177_PictureMarkerSymbol_Opacity;
                xamlMember.Setter = set_177_PictureMarkerSymbol_Opacity;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.XOffset":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "XOffset", "Double");
                xamlMember.Getter = get_178_PictureMarkerSymbol_XOffset;
                xamlMember.Setter = set_178_PictureMarkerSymbol_XOffset;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.YOffset":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "YOffset", "Double");
                xamlMember.Getter = get_179_PictureMarkerSymbol_YOffset;
                xamlMember.Setter = set_179_PictureMarkerSymbol_YOffset;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleFillSymbol.Outline":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleFillSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Outline", "Esri.ArcGISRuntime.Symbology.SimpleLineSymbol");
                xamlMember.Getter = get_180_SimpleFillSymbol_Outline;
                xamlMember.Setter = set_180_SimpleFillSymbol_Outline;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleFillSymbol.Color":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleFillSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.Getter = get_181_SimpleFillSymbol_Color;
                xamlMember.Setter = set_181_SimpleFillSymbol_Color;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleFillSymbol.Style":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleFillSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Style", "Esri.ArcGISRuntime.Symbology.SimpleFillStyle");
                xamlMember.Getter = get_182_SimpleFillSymbol_Style;
                xamlMember.Setter = set_182_SimpleFillSymbol_Style;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleLineSymbol.Width":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleLineSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_183_SimpleLineSymbol_Width;
                xamlMember.Setter = set_183_SimpleLineSymbol_Width;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleLineSymbol.Color":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleLineSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.Getter = get_184_SimpleLineSymbol_Color;
                xamlMember.Setter = set_184_SimpleLineSymbol_Color;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleLineSymbol.Style":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleLineSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Style", "Esri.ArcGISRuntime.Symbology.SimpleLineStyle");
                xamlMember.Getter = get_185_SimpleLineSymbol_Style;
                xamlMember.Setter = set_185_SimpleLineSymbol_Style;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Outline":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Outline", "Esri.ArcGISRuntime.Symbology.SimpleLineSymbol");
                xamlMember.Getter = get_186_SimpleMarkerSymbol_Outline;
                xamlMember.Setter = set_186_SimpleMarkerSymbol_Outline;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Size":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Size", "Double");
                xamlMember.Getter = get_187_SimpleMarkerSymbol_Size;
                xamlMember.Setter = set_187_SimpleMarkerSymbol_Size;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Color":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.Getter = get_188_SimpleMarkerSymbol_Color;
                xamlMember.Setter = set_188_SimpleMarkerSymbol_Color;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Style":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Style", "Esri.ArcGISRuntime.Symbology.SimpleMarkerStyle");
                xamlMember.Getter = get_189_SimpleMarkerSymbol_Style;
                xamlMember.Setter = set_189_SimpleMarkerSymbol_Style;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Angle":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Angle", "Double");
                xamlMember.Getter = get_190_SimpleMarkerSymbol_Angle;
                xamlMember.Setter = set_190_SimpleMarkerSymbol_Angle;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.XOffset":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "XOffset", "Double");
                xamlMember.Getter = get_191_SimpleMarkerSymbol_XOffset;
                xamlMember.Setter = set_191_SimpleMarkerSymbol_XOffset;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.YOffset":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "YOffset", "Double");
                xamlMember.Getter = get_192_SimpleMarkerSymbol_YOffset;
                xamlMember.Setter = set_192_SimpleMarkerSymbol_YOffset;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.AngleAlignment":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "AngleAlignment", "Esri.ArcGISRuntime.Symbology.MarkerAngleAlignment");
                xamlMember.Getter = get_193_SimpleMarkerSymbol_AngleAlignment;
                xamlMember.Setter = set_193_SimpleMarkerSymbol_AngleAlignment;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.Text":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.Getter = get_194_TextSymbol_Text;
                xamlMember.Setter = set_194_TextSymbol_Text;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.Color":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.Getter = get_195_TextSymbol_Color;
                xamlMember.Setter = set_195_TextSymbol_Color;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.BackgroundColor":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "BackgroundColor", "Windows.UI.Color");
                xamlMember.Getter = get_196_TextSymbol_BackgroundColor;
                xamlMember.Setter = set_196_TextSymbol_BackgroundColor;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.BorderLineColor":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "BorderLineColor", "Windows.UI.Color");
                xamlMember.Getter = get_197_TextSymbol_BorderLineColor;
                xamlMember.Setter = set_197_TextSymbol_BorderLineColor;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.BorderLineSize":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "BorderLineSize", "Double");
                xamlMember.Getter = get_198_TextSymbol_BorderLineSize;
                xamlMember.Setter = set_198_TextSymbol_BorderLineSize;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.VerticalTextAlignment":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "VerticalTextAlignment", "Esri.ArcGISRuntime.Symbology.VerticalTextAlignment");
                xamlMember.Getter = get_199_TextSymbol_VerticalTextAlignment;
                xamlMember.Setter = set_199_TextSymbol_VerticalTextAlignment;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.HorizontalTextAlignment":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "HorizontalTextAlignment", "Esri.ArcGISRuntime.Symbology.HorizontalTextAlignment");
                xamlMember.Getter = get_200_TextSymbol_HorizontalTextAlignment;
                xamlMember.Setter = set_200_TextSymbol_HorizontalTextAlignment;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.Angle":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "Angle", "Double");
                xamlMember.Getter = get_201_TextSymbol_Angle;
                xamlMember.Setter = set_201_TextSymbol_Angle;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.XOffset":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "XOffset", "Double");
                xamlMember.Getter = get_202_TextSymbol_XOffset;
                xamlMember.Setter = set_202_TextSymbol_XOffset;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.YOffset":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "YOffset", "Double");
                xamlMember.Getter = get_203_TextSymbol_YOffset;
                xamlMember.Setter = set_203_TextSymbol_YOffset;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.AngleAlignment":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "AngleAlignment", "Esri.ArcGISRuntime.Symbology.MarkerAngleAlignment");
                xamlMember.Getter = get_204_TextSymbol_AngleAlignment;
                xamlMember.Setter = set_204_TextSymbol_AngleAlignment;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.IsRightToLeft":
                userType = (global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlMember(this, "IsRightToLeft", "Boolean");
                xamlMember.Getter = get_205_TextSymbol_IsRightToLeft;
                xamlMember.Setter = set_205_TextSymbol_IsRightToLeft;
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlSystemBaseType
    {
        global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::ArcGIS_DOTNET_3D_Sample.ArcGIS_DOTNET_3D_Sample_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


